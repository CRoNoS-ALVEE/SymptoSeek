<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/app/admin/feedback/feedback.module.css">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/admin/feedback/feedback.module.css" />
              <option name="originalContent" value="/* Admin Feedback Page Styles - Matching admin dashboard design */&#10;&#10;.container {&#10;  min-height: 100vh;&#10;  display: flex;&#10;  background: linear-gradient(135deg, #f6f8ff 0%, #f0f4ff 100%);&#10;  position: relative;&#10;  overflow-x: hidden;&#10;}&#10;&#10;.sidebar {&#10;  width: 280px;&#10;  background: white;&#10;  padding: 1.5rem;&#10;  display: flex;&#10;  flex-direction: column;&#10;  border-right: 1px solid #e5e7eb;&#10;  position: fixed;&#10;  height: 100vh;&#10;  transition: transform 0.3s ease-in-out;&#10;  z-index: 90;&#10;}&#10;&#10;.logo {&#10;  display: flex;&#10;  align-items: center;&#10;  gap: 0.75rem;&#10;  padding-bottom: 1.5rem;&#10;  margin-bottom: 1.5rem;&#10;  border-bottom: 1px solid #e5e7eb;&#10;  color: #9333ea;&#10;  font-weight: 600;&#10;  font-size: 1.125rem;&#10;}&#10;&#10;.logo span {&#10;  color: #111827;&#10;  white-space: nowrap;&#10;}&#10;&#10;.navigation {&#10;  display: flex;&#10;  flex-direction: column;&#10;  gap: 0.5rem;&#10;  width: 100%;&#10;}&#10;&#10;.navItem {&#10;  display: flex;&#10;  align-items: center;&#10;  gap: 0.75rem;&#10;  padding: 0.75rem 1rem;&#10;  color: #4b5563;&#10;  text-decoration: none;&#10;  border-radius: 0.5rem;&#10;  transition: all 0.2s ease;&#10;  width: 100%;&#10;  white-space: nowrap;&#10;}&#10;&#10;.navItem:hover {&#10;  background: #f3f4f6;&#10;  color: #7928ca;&#10;}&#10;&#10;.navItem.active {&#10;  background: #f3e8ff;&#10;  color: #9333ea;&#10;}&#10;&#10;.sidebarFooter {&#10;  margin-top: auto;&#10;}&#10;&#10;.logoutBtn {&#10;  display: flex;&#10;  align-items: center;&#10;  gap: 0.75rem;&#10;  padding: 0.75rem 1rem;&#10;  color: #dc2626;&#10;  text-decoration: none;&#10;  border-radius: 0.5rem;&#10;  transition: all 0.2s ease;&#10;  border: none;&#10;  background: none;&#10;  font-size: 0.875rem;&#10;  width: 100%;&#10;  text-align: left;&#10;  cursor: pointer;&#10;}&#10;&#10;.logoutBtn:hover {&#10;  background: #fee2e2;&#10;}&#10;&#10;.main {&#10;  flex: 1;&#10;  margin-left: 280px;&#10;  padding: 2rem;&#10;}&#10;&#10;.header {&#10;  display: flex;&#10;  justify-content: space-between;&#10;  align-items: center;&#10;  margin-bottom: 2rem;&#10;  padding: 0 1rem;&#10;}&#10;&#10;.headerLeft h1 {&#10;  font-size: 1.875rem;&#10;  font-weight: 700;&#10;  color: #111827;&#10;  margin: 0 0 0.5rem 0;&#10;}&#10;&#10;.headerLeft p {&#10;  color: #6b7280;&#10;  margin: 0;&#10;}&#10;&#10;.headerRight {&#10;  display: flex;&#10;  gap: 1rem;&#10;  align-items: center;&#10;}&#10;&#10;.adminProfile {&#10;  display: flex;&#10;  align-items: center;&#10;  gap: 0.75rem;&#10;}&#10;&#10;.avatar {&#10;  width: 40px;&#10;  height: 40px;&#10;  border-radius: 50%;&#10;  background: #9333ea;&#10;  color: white;&#10;  display: flex;&#10;  align-items: center;&#10;  justify-content: center;&#10;  font-weight: 600;&#10;}&#10;&#10;.avatar img {&#10;  width: 100%;&#10;  height: 100%;&#10;  border-radius: 50%;&#10;  object-fit: cover;&#10;}&#10;&#10;.error {&#10;  background: #fee2e2;&#10;  color: #dc2626;&#10;  padding: 1rem;&#10;  border-radius: 0.5rem;&#10;  margin-bottom: 1rem;&#10;  border: 1px solid #fecaca;&#10;}&#10;&#10;.success {&#10;  background: #d1fae5;&#10;  color: #065f46;&#10;  padding: 1rem;&#10;  border-radius: 0.5rem;&#10;  margin-bottom: 1rem;&#10;  border: 1px solid #a7f3d0;&#10;}&#10;&#10;.statsGrid {&#10;  display: grid;&#10;  grid-template-columns: repeat(3, 1fr);&#10;  gap: 1.5rem;&#10;  margin-bottom: 2rem;&#10;}&#10;&#10;.statCard {&#10;  background: white;&#10;  padding: 1.5rem;&#10;  border-radius: 1.5rem;&#10;  box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);&#10;  transition: transform 0.3s ease;&#10;  display: flex;&#10;  align-items: center;&#10;  gap: 1rem;&#10;}&#10;&#10;.statCard:hover {&#10;  transform: translateY(-5px);&#10;  box-shadow: 0 8px 16px rgba(0, 0, 0, 0.1);&#10;}&#10;&#10;.statIcon {&#10;  color: #9333ea;&#10;  background: #f3e8ff;&#10;  padding: 1rem;&#10;  border-radius: 1rem;&#10;}&#10;&#10;.statContent h3 {&#10;  font-size: 1.875rem;&#10;  font-weight: 700;&#10;  color: #111827;&#10;  margin: 0 0 0.25rem 0;&#10;}&#10;&#10;.statContent p {&#10;  color: #6b7280;&#10;  font-size: 0.875rem;&#10;  margin: 0;&#10;}&#10;&#10;.feedbackGrid {&#10;  display: grid;&#10;  grid-template-columns: repeat(auto-fill, minmax(400px, 1fr));&#10;  gap: 1.5rem;&#10;}&#10;&#10;.feedbackCard {&#10;  background: white;&#10;  padding: 1.5rem;&#10;  border-radius: 1rem;&#10;  box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);&#10;  transition: transform 0.2s ease;&#10;}&#10;&#10;.feedbackCard:hover {&#10;  transform: translateY(-2px);&#10;  box-shadow: 0 8px 16px rgba(0, 0, 0, 0.1);&#10;}&#10;&#10;.cardHeader {&#10;  display: flex;&#10;  justify-content: space-between;&#10;  align-items: flex-start;&#10;  margin-bottom: 1rem;&#10;}&#10;&#10;.userInfo {&#10;  display: flex;&#10;  align-items: center;&#10;  gap: 0.5rem;&#10;}&#10;&#10;.userName {&#10;  font-weight: 600;&#10;  color: #111827;&#10;}&#10;&#10;.cardMeta {&#10;  display: flex;&#10;  flex-direction: column;&#10;  align-items: flex-end;&#10;  gap: 0.5rem;&#10;}&#10;&#10;.rating {&#10;  display: flex;&#10;  gap: 0.25rem;&#10;}&#10;&#10;.star {&#10;  color: #d1d5db;&#10;}&#10;&#10;.star.filled {&#10;  color: #fbbf24;&#10;}&#10;&#10;.date {&#10;  display: flex;&#10;  align-items: center;&#10;  gap: 0.25rem;&#10;  font-size: 0.75rem;&#10;  color: #6b7280;&#10;}&#10;&#10;.category {&#10;  background: #f3e8ff;&#10;  color: #9333ea;&#10;  padding: 0.25rem 0.75rem;&#10;  border-radius: 9999px;&#10;  font-size: 0.75rem;&#10;  font-weight: 500;&#10;  margin-bottom: 1rem;&#10;  width: fit-content;&#10;}&#10;&#10;.feedbackText {&#10;  color: #374151;&#10;  line-height: 1.6;&#10;  margin-bottom: 1rem;&#10;}&#10;&#10;.cardFooter {&#10;  display: flex;&#10;  justify-content: space-between;&#10;  align-items: center;&#10;}&#10;&#10;.status {&#10;  display: flex;&#10;  align-items: center;&#10;}&#10;&#10;.statusBadge {&#10;  display: flex;&#10;  align-items: center;&#10;  gap: 0.25rem;&#10;  padding: 0.25rem 0.75rem;&#10;  border-radius: 9999px;&#10;  font-size: 0.75rem;&#10;  font-weight: 500;&#10;}&#10;&#10;.statusBadge.private {&#10;  background: #f3f4f6;&#10;  color: #6b7280;&#10;}&#10;&#10;.statusBadge.approved {&#10;  background: #d1fae5;&#10;  color: #065f46;&#10;}&#10;&#10;.statusBadge.pending {&#10;  background: #fef3c7;&#10;  color: #92400e;&#10;}&#10;&#10;.actions {&#10;  display: flex;&#10;  gap: 0.5rem;&#10;}&#10;&#10;.approveBtn, .rejectBtn, .unapproveBtn {&#10;  display: flex;&#10;  align-items: center;&#10;  gap: 0.25rem;&#10;  padding: 0.375rem 0.75rem;&#10;  border: none;&#10;  border-radius: 0.375rem;&#10;  font-size: 0.75rem;&#10;  font-weight: 500;&#10;  cursor: pointer;&#10;  transition: all 0.2s ease;&#10;}&#10;&#10;.approveBtn {&#10;  background: #d1fae5;&#10;  color: #065f46;&#10;}&#10;&#10;.approveBtn:hover {&#10;  background: #a7f3d0;&#10;}&#10;&#10;.rejectBtn, .unapproveBtn {&#10;  background: #fee2e2;&#10;  color: #dc2626;&#10;}&#10;&#10;.rejectBtn:hover, .unapproveBtn:hover {&#10;  background: #fecaca;&#10;}&#10;&#10;.noFeedback {&#10;  text-align: center;&#10;  padding: 3rem;&#10;  color: #6b7280;&#10;  font-style: italic;&#10;}&#10;&#10;.loading {&#10;  display: flex;&#10;  flex-direction: column;&#10;  align-items: center;&#10;  justify-content: center;&#10;  min-height: 100vh;&#10;  gap: 1rem;&#10;}&#10;&#10;.spinner {&#10;  width: 40px;&#10;  height: 40px;&#10;  border: 4px solid #f3f4f6;&#10;  border-top: 4px solid #9333ea;&#10;  border-radius: 50%;&#10;  animation: spin 1s linear infinite;&#10;}&#10;&#10;@keyframes spin {&#10;  0% { transform: rotate(0deg); }&#10;  100% { transform: rotate(360deg); }&#10;}&#10;&#10;/* Responsive Design */&#10;@media (max-width: 1200px) {&#10;  .statsGrid {&#10;    grid-template-columns: repeat(2, 1fr);&#10;  }&#10;&#10;  .feedbackGrid {&#10;    grid-template-columns: repeat(auto-fill, minmax(350px, 1fr));&#10;  }&#10;}&#10;&#10;@media (max-width: 768px) {&#10;  .sidebar {&#10;    width: 240px;&#10;    padding: 1rem;&#10;    transform: translateX(-100%);&#10;  }&#10;&#10;  .main {&#10;    margin-left: 0;&#10;    padding: 1rem;&#10;  }&#10;&#10;  .header {&#10;    flex-direction: column;&#10;    align-items: flex-start;&#10;    gap: 1rem;&#10;  }&#10;&#10;  .statsGrid {&#10;    grid-template-columns: 1fr;&#10;  }&#10;&#10;  .feedbackGrid {&#10;    grid-template-columns: 1fr;&#10;  }&#10;&#10;  .cardHeader {&#10;    flex-direction: column;&#10;    align-items: flex-start;&#10;    gap: 0.5rem;&#10;  }&#10;&#10;  .cardMeta {&#10;    align-items: flex-start;&#10;  }&#10;}&#10;&#10;@media (max-width: 480px) {&#10;  .feedbackCard {&#10;    padding: 1rem;&#10;  }&#10;&#10;  .cardFooter {&#10;    flex-direction: column;&#10;    align-items: flex-start;&#10;    gap: 0.75rem;&#10;  }&#10;}&#10;&#10;.hidden {&#10;  display: none !important;&#10;}&#10;" />
              <option name="updatedContent" value="/* Admin Feedback Page Styles - Matching admin dashboard design */&#13;&#10;&#13;&#10;.container {&#13;&#10;  min-height: 100vh;&#13;&#10;  display: flex;&#13;&#10;  background: linear-gradient(135deg, #f6f8ff 0%, #f0f4ff 100%);&#13;&#10;  position: relative;&#13;&#10;  overflow-x: hidden;&#13;&#10;}&#13;&#10;&#13;&#10;.sidebar {&#13;&#10;  width: 280px;&#13;&#10;  background: white;&#13;&#10;  padding: 1.5rem;&#13;&#10;  display: flex;&#13;&#10;  flex-direction: column;&#13;&#10;  border-right: 1px solid #e5e7eb;&#13;&#10;  position: fixed;&#13;&#10;  height: 100vh;&#13;&#10;  transition: transform 0.3s ease-in-out;&#13;&#10;  z-index: 90;&#13;&#10;}&#13;&#10;&#13;&#10;.logo {&#13;&#10;  display: flex;&#13;&#10;  align-items: center;&#13;&#10;  gap: 0.75rem;&#13;&#10;  padding-bottom: 1.5rem;&#13;&#10;  margin-bottom: 1.5rem;&#13;&#10;  border-bottom: 1px solid #e5e7eb;&#13;&#10;  color: #9333ea;&#13;&#10;  font-weight: 600;&#13;&#10;  font-size: 1.125rem;&#13;&#10;}&#13;&#10;&#13;&#10;.logo span {&#13;&#10;  color: #111827;&#13;&#10;  white-space: nowrap;&#13;&#10;}&#13;&#10;&#13;&#10;.navigation {&#13;&#10;  display: flex;&#13;&#10;  flex-direction: column;&#13;&#10;  gap: 0.5rem;&#13;&#10;  width: 100%;&#13;&#10;}&#13;&#10;&#13;&#10;.navItem {&#13;&#10;  display: flex;&#13;&#10;  align-items: center;&#13;&#10;  gap: 0.75rem;&#13;&#10;  padding: 0.75rem 1rem;&#13;&#10;  color: #4b5563;&#13;&#10;  text-decoration: none;&#13;&#10;  border-radius: 0.5rem;&#13;&#10;  transition: all 0.2s ease;&#13;&#10;  width: 100%;&#13;&#10;  white-space: nowrap;&#13;&#10;}&#13;&#10;&#13;&#10;.navItem:hover {&#13;&#10;  background: #f3f4f6;&#13;&#10;  color: #7928ca;&#13;&#10;}&#13;&#10;&#13;&#10;.navItem.active {&#13;&#10;  background: #f3e8ff;&#13;&#10;  color: #9333ea;&#13;&#10;}&#13;&#10;&#13;&#10;.sidebarFooter {&#13;&#10;  margin-top: auto;&#13;&#10;}&#13;&#10;&#13;&#10;.logoutBtn {&#13;&#10;  display: flex;&#13;&#10;  align-items: center;&#13;&#10;  gap: 0.75rem;&#13;&#10;  padding: 0.75rem 1rem;&#13;&#10;  color: #dc2626;&#13;&#10;  text-decoration: none;&#13;&#10;  border-radius: 0.5rem;&#13;&#10;  transition: all 0.2s ease;&#13;&#10;  border: none;&#13;&#10;  background: none;&#13;&#10;  font-size: 0.875rem;&#13;&#10;  width: 100%;&#13;&#10;  text-align: left;&#13;&#10;  cursor: pointer;&#13;&#10;}&#13;&#10;&#13;&#10;.logoutBtn:hover {&#13;&#10;  background: #fee2e2;&#13;&#10;}&#13;&#10;&#13;&#10;.main {&#13;&#10;  flex: 1;&#13;&#10;  margin-left: 280px;&#13;&#10;  padding: 2rem;&#13;&#10;}&#13;&#10;&#13;&#10;.header {&#13;&#10;  display: flex;&#13;&#10;  justify-content: space-between;&#13;&#10;  align-items: center;&#13;&#10;  margin-bottom: 2rem;&#13;&#10;  padding: 0 1rem;&#13;&#10;}&#13;&#10;&#13;&#10;.headerLeft h1 {&#13;&#10;  font-size: 1.875rem;&#13;&#10;  font-weight: 700;&#13;&#10;  color: #111827;&#13;&#10;  margin: 0 0 0.5rem 0;&#13;&#10;}&#13;&#10;&#13;&#10;.headerLeft p {&#13;&#10;  color: #6b7280;&#13;&#10;  margin: 0;&#13;&#10;}&#13;&#10;&#13;&#10;.headerRight {&#13;&#10;  display: flex;&#13;&#10;  gap: 1rem;&#13;&#10;  align-items: center;&#13;&#10;}&#13;&#10;&#13;&#10;.adminProfile {&#13;&#10;  display: flex;&#13;&#10;  align-items: center;&#13;&#10;  gap: 0.75rem;&#13;&#10;}&#13;&#10;&#13;&#10;.avatar {&#13;&#10;  width: 40px;&#13;&#10;  height: 40px;&#13;&#10;  border-radius: 50%;&#13;&#10;  background: #9333ea;&#13;&#10;  color: white;&#13;&#10;  display: flex;&#13;&#10;  align-items: center;&#13;&#10;  justify-content: center;&#13;&#10;  font-weight: 600;&#13;&#10;}&#13;&#10;&#13;&#10;.avatar img {&#13;&#10;  width: 100%;&#13;&#10;  height: 100%;&#13;&#10;  border-radius: 50%;&#13;&#10;  object-fit: cover;&#13;&#10;}&#13;&#10;&#13;&#10;.error {&#13;&#10;  background: #fee2e2;&#13;&#10;  color: #dc2626;&#13;&#10;  padding: 1rem;&#13;&#10;  border-radius: 0.5rem;&#13;&#10;  margin-bottom: 1rem;&#13;&#10;  border: 1px solid #fecaca;&#13;&#10;}&#13;&#10;&#13;&#10;.success {&#13;&#10;  background: #d1fae5;&#13;&#10;  color: #065f46;&#13;&#10;  padding: 1rem;&#13;&#10;  border-radius: 0.5rem;&#13;&#10;  margin-bottom: 1rem;&#13;&#10;  border: 1px solid #a7f3d0;&#13;&#10;}&#13;&#10;&#13;&#10;.statsGrid {&#13;&#10;  display: grid;&#13;&#10;  grid-template-columns: repeat(3, 1fr);&#13;&#10;  gap: 1.5rem;&#13;&#10;  margin-bottom: 2rem;&#13;&#10;}&#13;&#10;&#13;&#10;.statCard {&#13;&#10;  background: white;&#13;&#10;  padding: 1.5rem;&#13;&#10;  border-radius: 1.5rem;&#13;&#10;  box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);&#13;&#10;  transition: transform 0.3s ease;&#13;&#10;  display: flex;&#13;&#10;  align-items: center;&#13;&#10;  gap: 1rem;&#13;&#10;}&#13;&#10;&#13;&#10;.statCard:hover {&#13;&#10;  transform: translateY(-5px);&#13;&#10;  box-shadow: 0 8px 16px rgba(0, 0, 0, 0.1);&#13;&#10;}&#13;&#10;&#13;&#10;.statIcon {&#13;&#10;  color: #9333ea;&#13;&#10;  background: #f3e8ff;&#13;&#10;  padding: 1rem;&#13;&#10;  border-radius: 1rem;&#13;&#10;}&#13;&#10;&#13;&#10;.statContent h3 {&#13;&#10;  font-size: 1.875rem;&#13;&#10;  font-weight: 700;&#13;&#10;  color: #111827;&#13;&#10;  margin: 0 0 0.25rem 0;&#13;&#10;}&#13;&#10;&#13;&#10;.statContent p {&#13;&#10;  color: #6b7280;&#13;&#10;  font-size: 0.875rem;&#13;&#10;  margin: 0;&#13;&#10;}&#13;&#10;&#13;&#10;.feedbackGrid {&#13;&#10;  display: grid;&#13;&#10;  grid-template-columns: repeat(auto-fill, minmax(400px, 1fr));&#13;&#10;  gap: 1.5rem;&#13;&#10;}&#13;&#10;&#13;&#10;.feedbackCard {&#13;&#10;  background: white;&#13;&#10;  padding: 1.5rem;&#13;&#10;  border-radius: 1rem;&#13;&#10;  box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);&#13;&#10;  transition: transform 0.2s ease;&#13;&#10;}&#13;&#10;&#13;&#10;.feedbackCard:hover {&#13;&#10;  transform: translateY(-2px);&#13;&#10;  box-shadow: 0 8px 16px rgba(0, 0, 0, 0.1);&#13;&#10;}&#13;&#10;&#13;&#10;.cardHeader {&#13;&#10;  display: flex;&#13;&#10;  justify-content: space-between;&#13;&#10;  align-items: flex-start;&#13;&#10;  margin-bottom: 1rem;&#13;&#10;}&#13;&#10;&#13;&#10;.userInfo {&#13;&#10;  display: flex;&#13;&#10;  align-items: center;&#13;&#10;  gap: 0.5rem;&#13;&#10;}&#13;&#10;&#13;&#10;.userName {&#13;&#10;  font-weight: 600;&#13;&#10;  color: #111827;&#13;&#10;}&#13;&#10;&#13;&#10;.cardMeta {&#13;&#10;  display: flex;&#13;&#10;  flex-direction: column;&#13;&#10;  align-items: flex-end;&#13;&#10;  gap: 0.5rem;&#13;&#10;}&#13;&#10;&#13;&#10;.rating {&#13;&#10;  display: flex;&#13;&#10;  gap: 0.25rem;&#13;&#10;}&#13;&#10;&#13;&#10;.star {&#13;&#10;  color: #d1d5db;&#13;&#10;}&#13;&#10;&#13;&#10;.star.filled {&#13;&#10;  color: #fbbf24;&#13;&#10;}&#13;&#10;&#13;&#10;.date {&#13;&#10;  display: flex;&#13;&#10;  align-items: center;&#13;&#10;  gap: 0.25rem;&#13;&#10;  font-size: 0.75rem;&#13;&#10;  color: #6b7280;&#13;&#10;}&#13;&#10;&#13;&#10;.category {&#13;&#10;  background: #f3e8ff;&#13;&#10;  color: #9333ea;&#13;&#10;  padding: 0.25rem 0.75rem;&#13;&#10;  border-radius: 9999px;&#13;&#10;  font-size: 0.75rem;&#13;&#10;  font-weight: 500;&#13;&#10;  margin-bottom: 1rem;&#13;&#10;  width: fit-content;&#13;&#10;}&#13;&#10;&#13;&#10;.feedbackText {&#13;&#10;  color: #374151;&#13;&#10;  line-height: 1.6;&#13;&#10;  margin-bottom: 1rem;&#13;&#10;}&#13;&#10;&#13;&#10;.cardFooter {&#13;&#10;  display: flex;&#13;&#10;  justify-content: space-between;&#13;&#10;  align-items: center;&#13;&#10;}&#13;&#10;&#13;&#10;.status {&#13;&#10;  display: flex;&#13;&#10;  align-items: center;&#13;&#10;}&#13;&#10;&#13;&#10;.statusBadge {&#13;&#10;  display: flex;&#13;&#10;  align-items: center;&#13;&#10;  gap: 0.25rem;&#13;&#10;  padding: 0.25rem 0.75rem;&#13;&#10;  border-radius: 9999px;&#13;&#10;  font-size: 0.75rem;&#13;&#10;  font-weight: 500;&#13;&#10;}&#13;&#10;&#13;&#10;.statusBadge.private {&#13;&#10;  background: #f3f4f6;&#13;&#10;  color: #6b7280;&#13;&#10;}&#13;&#10;&#13;&#10;.statusBadge.approved {&#13;&#10;  background: #d1fae5;&#13;&#10;  color: #065f46;&#13;&#10;}&#13;&#10;&#13;&#10;.statusBadge.pending {&#13;&#10;  background: #fef3c7;&#13;&#10;  color: #92400e;&#13;&#10;}&#13;&#10;&#13;&#10;.actions {&#13;&#10;  display: flex;&#13;&#10;  gap: 0.5rem;&#13;&#10;}&#13;&#10;&#13;&#10;.approveBtn, .rejectBtn, .unapproveBtn {&#13;&#10;  display: flex;&#13;&#10;  align-items: center;&#13;&#10;  gap: 0.25rem;&#13;&#10;  padding: 0.375rem 0.75rem;&#13;&#10;  border: none;&#13;&#10;  border-radius: 0.375rem;&#13;&#10;  font-size: 0.75rem;&#13;&#10;  font-weight: 500;&#13;&#10;  cursor: pointer;&#13;&#10;  transition: all 0.2s ease;&#13;&#10;}&#13;&#10;&#13;&#10;.approveBtn {&#13;&#10;  background: #d1fae5;&#13;&#10;  color: #065f46;&#13;&#10;}&#13;&#10;&#13;&#10;.approveBtn:hover {&#13;&#10;  background: #a7f3d0;&#13;&#10;}&#13;&#10;&#13;&#10;.rejectBtn, .unapproveBtn {&#13;&#10;  background: #fee2e2;&#13;&#10;  color: #dc2626;&#13;&#10;}&#13;&#10;&#13;&#10;.rejectBtn:hover, .unapproveBtn:hover {&#13;&#10;  background: #fecaca;&#13;&#10;}&#13;&#10;&#13;&#10;.noFeedback {&#13;&#10;  text-align: center;&#13;&#10;  padding: 3rem;&#13;&#10;  color: #6b7280;&#13;&#10;  font-style: italic;&#13;&#10;}&#13;&#10;&#13;&#10;.loading {&#13;&#10;  display: flex;&#13;&#10;  flex-direction: column;&#13;&#10;  align-items: center;&#13;&#10;  justify-content: center;&#13;&#10;  min-height: 100vh;&#13;&#10;  gap: 1rem;&#13;&#10;}&#13;&#10;&#13;&#10;/* Loading container styles */&#13;&#10;.loadingContainer {&#13;&#10;  display: flex;&#13;&#10;  flex-direction: column;&#13;&#10;  align-items: center;&#13;&#10;  justify-content: center;&#13;&#10;  padding: 3rem 2rem;&#13;&#10;  background: white;&#13;&#10;  border-radius: 1rem;&#13;&#10;  box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);&#13;&#10;  grid-column: 1 / -1; /* Span full width in grid */&#13;&#10;}&#13;&#10;&#13;&#10;.loadingContainer p {&#13;&#10;  margin: 0;&#13;&#10;  font-size: 0.875rem;&#13;&#10;  color: #6b7280;&#13;&#10;}&#13;&#10;&#13;&#10;.spinner {&#13;&#10;  width: 40px;&#13;&#10;  height: 40px;&#13;&#10;  border: 4px solid #f3f4f6;&#13;&#10;  border-top: 4px solid #9333ea;&#13;&#10;  border-radius: 50%;&#13;&#10;  animation: spin 1s linear infinite;&#13;&#10;}&#13;&#10;&#13;&#10;@keyframes spin {&#13;&#10;  0% { transform: rotate(0deg); }&#13;&#10;  100% { transform: rotate(360deg); }&#13;&#10;}&#13;&#10;&#13;&#10;/* Responsive Design */&#13;&#10;@media (max-width: 1200px) {&#13;&#10;  .statsGrid {&#13;&#10;    grid-template-columns: repeat(2, 1fr);&#13;&#10;  }&#13;&#10;&#13;&#10;  .feedbackGrid {&#13;&#10;    grid-template-columns: repeat(auto-fill, minmax(350px, 1fr));&#13;&#10;  }&#13;&#10;}&#13;&#10;&#13;&#10;@media (max-width: 768px) {&#13;&#10;  .sidebar {&#13;&#10;    width: 240px;&#13;&#10;    padding: 1rem;&#13;&#10;    transform: translateX(-100%);&#13;&#10;  }&#13;&#10;&#13;&#10;  .main {&#13;&#10;    margin-left: 0;&#13;&#10;    padding: 1rem;&#13;&#10;  }&#13;&#10;&#13;&#10;  .header {&#13;&#10;    flex-direction: column;&#13;&#10;    align-items: flex-start;&#13;&#10;    gap: 1rem;&#13;&#10;  }&#13;&#10;&#13;&#10;  .statsGrid {&#13;&#10;    grid-template-columns: 1fr;&#13;&#10;  }&#13;&#10;&#13;&#10;  .feedbackGrid {&#13;&#10;    grid-template-columns: 1fr;&#13;&#10;  }&#13;&#10;&#13;&#10;  .cardHeader {&#13;&#10;    flex-direction: column;&#13;&#10;    align-items: flex-start;&#13;&#10;    gap: 0.5rem;&#13;&#10;  }&#13;&#10;&#13;&#10;  .cardMeta {&#13;&#10;    align-items: flex-start;&#13;&#10;  }&#13;&#10;}&#13;&#10;&#13;&#10;@media (max-width: 480px) {&#13;&#10;  .feedbackCard {&#13;&#10;    padding: 1rem;&#13;&#10;  }&#13;&#10;&#13;&#10;  .cardFooter {&#13;&#10;    flex-direction: column;&#13;&#10;    align-items: flex-start;&#13;&#10;    gap: 0.75rem;&#13;&#10;  }&#13;&#10;}&#13;&#10;&#13;&#10;.hidden {&#13;&#10;  display: none !important;&#13;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/admin/feedback/page.tsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/admin/feedback/page.tsx" />
              <option name="originalContent" value="'use client'&#10;&#10;import { useState, useEffect } from 'react'&#10;import { useRouter } from 'next/navigation'&#10;import Link from 'next/link'&#10;import {&#10;  LayoutDashboard,&#10;  Users,&#10;  MessageSquare,&#10;  Calendar,&#10;  FileText,&#10;  Settings,&#10;  LogOut,&#10;  Check,&#10;  X,&#10;  Eye,&#10;  Star,&#10;  User&#10;} from 'lucide-react'&#10;import styles from './feedback.module.css'&#10;import { getApiUrl, API_CONFIG } from '@/config/api';&#10;import Loading from &quot;../../components/Loading/Loading&quot;;&#10;&#10;interface FeedbackItem {&#10;  _id: string&#10;  userName: string&#10;  userEmail: string&#10;  rating: number&#10;  feedback: string&#10;  category: string&#10;  isPublic: boolean&#10;  isApproved: boolean&#10;  createdAt: string&#10;}&#10;&#10;export default function AdminFeedbackPage() {&#10;  const [user, setUser] = useState&lt;any&gt;(null)&#10;  const [feedbacks, setFeedbacks] = useState&lt;FeedbackItem[]&gt;([])&#10;  const [loading, setLoading] = useState(true)&#10;  const [error, setError] = useState&lt;string | null&gt;(null)&#10;  const [success, setSuccess] = useState&lt;string | null&gt;(null)&#10;  const router = useRouter()&#10;&#10;  const categories = [&#10;    { value: 'general', label: 'General Feedback' },&#10;    { value: 'accuracy', label: 'Accuracy' },&#10;    { value: 'user_experience', label: 'User Experience' },&#10;    { value: 'support', label: 'Support' },&#10;    { value: 'feature_request', label: 'Feature Request' }&#10;  ]&#10;&#10;  useEffect(() =&gt; {&#10;    checkAuth()&#10;    fetchAllFeedback()&#10;  }, [])&#10;&#10;  const checkAuth = async () =&gt; {&#10;    try {&#10;      const token = localStorage.getItem('adminToken')&#10;      if (!token) {&#10;        router.push('/admin/auth')&#10;        return&#10;      }&#10;&#10;      // For admin pages, we can directly check the stored admin info&#10;      const adminInfo = localStorage.getItem('adminInfo')&#10;      if (adminInfo) {&#10;        const admin = JSON.parse(adminInfo)&#10;        if (admin.role === 'admin') {&#10;          setUser(admin)&#10;        } else {&#10;          router.push('/admin/auth')&#10;          return&#10;        }&#10;      } else {&#10;        router.push('/admin/auth')&#10;        return&#10;      }&#10;    } catch (error) {&#10;      console.error('Auth check failed:', error)&#10;      router.push('/admin/auth')&#10;    } finally {&#10;      setLoading(false)&#10;    }&#10;  }&#10;&#10;  const fetchAllFeedback = async () =&gt; {&#10;    try {&#10;      const token = localStorage.getItem('adminToken')&#10;      const response = await fetch(getApiUrl(API_CONFIG.ENDPOINTS.FEEDBACK.ADMIN_ALL), {&#10;        headers: {&#10;          'Authorization': `Bearer ${token}`&#10;        }&#10;      })&#10;&#10;      if (response.ok) {&#10;        const data = await response.json()&#10;        setFeedbacks(data.data)&#10;        setError(null)&#10;      } else {&#10;        const errorData = await response.json()&#10;        setError(errorData.message || 'Failed to fetch feedback')&#10;      }&#10;    } catch (error) {&#10;      console.error('Error fetching feedback:', error)&#10;      setError('Network error. Please check your connection.')&#10;    }&#10;  }&#10;&#10;  const handleApproval = async (feedbackId: string, isApproved: boolean) =&gt; {&#10;    try {&#10;      const token = localStorage.getItem('adminToken')&#10;      const response = await fetch(getApiUrl(`${API_CONFIG.ENDPOINTS.FEEDBACK.ADMIN_APPROVE}/${feedbackId}/approve`), {&#10;        method: 'PATCH',&#10;        headers: {&#10;          'Content-Type': 'application/json',&#10;          'Authorization': `Bearer ${token}`&#10;        },&#10;        body: JSON.stringify({ isApproved })&#10;      })&#10;&#10;      if (response.ok) {&#10;        setSuccess(`Feedback ${isApproved ? 'approved' : 'rejected'} successfully!`)&#10;        await fetchAllFeedback()&#10;        setTimeout(() =&gt; setSuccess(null), 3000)&#10;      } else {&#10;        const errorData = await response.json()&#10;        setError(errorData.message || 'Failed to update feedback')&#10;      }&#10;    } catch (error) {&#10;      console.error('Error updating feedback:', error)&#10;      setError('Network error. Please try again.')&#10;    }&#10;  }&#10;&#10;  const handleLogout = () =&gt; {&#10;    localStorage.removeItem('adminToken')&#10;    localStorage.removeItem('adminInfo')&#10;    router.push('/admin/auth')&#10;  }&#10;&#10;  const renderStars = (rating: number) =&gt; {&#10;    return (&#10;      &lt;div className={styles.rating}&gt;&#10;        {[1, 2, 3, 4, 5].map((star) =&gt; (&#10;          &lt;Star&#10;            key={star}&#10;            size={16}&#10;            className={`${styles.star} ${star &lt;= rating ? styles.filled : ''}`}&#10;          /&gt;&#10;        ))}&#10;      &lt;/div&gt;&#10;    )&#10;  }&#10;&#10;  const getStatusColor = (isPublic: boolean, isApproved: boolean) =&gt; {&#10;    if (!isPublic) return styles.private&#10;    return isApproved ? styles.approved : styles.pending&#10;  }&#10;&#10;  const getStatusText = (isPublic: boolean, isApproved: boolean) =&gt; {&#10;    if (!isPublic) return 'Private'&#10;    return isApproved ? 'Approved' : 'Pending'&#10;  }&#10;&#10;  if (loading) {&#10;    return &lt;Loading /&gt;&#10;  }&#10;&#10;  return (&#10;    &lt;div className={styles.container}&gt;&#10;      {/* Sidebar */}&#10;      &lt;aside className={styles.sidebar}&gt;&#10;        &lt;div className={styles.logo}&gt;&#10;          &lt;LayoutDashboard size={24} /&gt;&#10;          &lt;span&gt;Admin Panel&lt;/span&gt;&#10;        &lt;/div&gt;&#10;&#10;        &lt;nav className={styles.navigation}&gt;&#10;          &lt;Link href=&quot;/admin/dashboard&quot; className={styles.navItem}&gt;&#10;            &lt;LayoutDashboard size={20} /&gt;&#10;            Dashboard&#10;          &lt;/Link&gt;&#10;          &lt;Link href=&quot;/admin/users&quot; className={styles.navItem}&gt;&#10;            &lt;Users size={20} /&gt;&#10;            Users&#10;          &lt;/Link&gt;&#10;          &lt;Link href=&quot;/admin/doctors&quot; className={styles.navItem}&gt;&#10;            &lt;Users size={20} /&gt;&#10;            Doctors&#10;          &lt;/Link&gt;&#10;          &lt;Link href=&quot;/admin/appointments&quot; className={styles.navItem}&gt;&#10;            &lt;Calendar size={20} /&gt;&#10;            Appointments&#10;          &lt;/Link&gt;&#10;          &lt;Link href=&quot;/admin/feedback&quot; className={`${styles.navItem} ${styles.active}`}&gt;&#10;            &lt;MessageSquare size={20} /&gt;&#10;            Feedback&#10;          &lt;/Link&gt;&#10;          &lt;Link href=&quot;/admin/reports&quot; className={styles.navItem}&gt;&#10;            &lt;FileText size={20} /&gt;&#10;            Reports&#10;          &lt;/Link&gt;&#10;          &lt;Link href=&quot;/admin/settings&quot; className={styles.navItem}&gt;&#10;            &lt;Settings size={20} /&gt;&#10;            Settings&#10;          &lt;/Link&gt;&#10;        &lt;/nav&gt;&#10;&#10;        &lt;div className={styles.sidebarFooter}&gt;&#10;          &lt;button onClick={handleLogout} className={styles.logoutBtn}&gt;&#10;            &lt;LogOut size={20} /&gt;&#10;            Logout&#10;          &lt;/button&gt;&#10;        &lt;/div&gt;&#10;      &lt;/aside&gt;&#10;&#10;      {/* Main Content */}&#10;      &lt;main className={styles.main}&gt;&#10;        &lt;header className={styles.header}&gt;&#10;          &lt;div className={styles.headerLeft}&gt;&#10;            &lt;h1&gt;Feedback Management&lt;/h1&gt;&#10;            &lt;p&gt;Review and approve user feedback for public testimonials&lt;/p&gt;&#10;          &lt;/div&gt;&#10;          &lt;div className={styles.headerRight}&gt;&#10;            &lt;div className={styles.adminProfile}&gt;&#10;              {user?.profile_pic ? (&#10;                &lt;img&#10;                  src={user.profile_pic}&#10;                  alt={user.name}&#10;                  className={styles.avatar}&#10;                  onError={(e) =&gt; {&#10;                    const target = e.target as HTMLImageElement;&#10;                    target.style.display = 'none';&#10;                    target.nextElementSibling?.classList.remove(styles.hidden);&#10;                  }}&#10;                /&gt;&#10;              ) : null}&#10;              &lt;div className={`${styles.avatar} ${user?.profile_pic ? styles.hidden : ''}`}&gt;&#10;                {user?.name?.charAt(0).toUpperCase()}&#10;              &lt;/div&gt;&#10;              &lt;span&gt;{user?.name}&lt;/span&gt;&#10;            &lt;/div&gt;&#10;          &lt;/div&gt;&#10;        &lt;/header&gt;&#10;&#10;        {error &amp;&amp; &lt;div className={styles.error}&gt;{error}&lt;/div&gt;}&#10;        {success &amp;&amp; &lt;div className={styles.success}&gt;{success}&lt;/div&gt;}&#10;&#10;        {/* Stats */}&#10;        &lt;div className={styles.statsGrid}&gt;&#10;          &lt;div className={styles.statCard}&gt;&#10;            &lt;div className={styles.statIcon}&gt;&#10;              &lt;MessageSquare size={24} /&gt;&#10;            &lt;/div&gt;&#10;            &lt;div className={styles.statContent}&gt;&#10;              &lt;h3&gt;{feedbacks.length}&lt;/h3&gt;&#10;              &lt;p&gt;Total Feedback&lt;/p&gt;&#10;            &lt;/div&gt;&#10;          &lt;/div&gt;&#10;&#10;          &lt;div className={styles.statCard}&gt;&#10;            &lt;div className={styles.statIcon}&gt;&#10;              &lt;Eye size={24} /&gt;&#10;            &lt;/div&gt;&#10;            &lt;div className={styles.statContent}&gt;&#10;              &lt;h3&gt;{feedbacks.filter(f =&gt; f.isPublic &amp;&amp; !f.isApproved).length}&lt;/h3&gt;&#10;              &lt;p&gt;Pending Approval&lt;/p&gt;&#10;            &lt;/div&gt;&#10;          &lt;/div&gt;&#10;&#10;          &lt;div className={styles.statCard}&gt;&#10;            &lt;div className={styles.statIcon}&gt;&#10;              &lt;Check size={24} /&gt;&#10;            &lt;/div&gt;&#10;            &lt;div className={styles.statContent}&gt;&#10;              &lt;h3&gt;{feedbacks.filter(f =&gt; f.isApproved).length}&lt;/h3&gt;&#10;              &lt;p&gt;Approved&lt;/p&gt;&#10;            &lt;/div&gt;&#10;          &lt;/div&gt;&#10;        &lt;/div&gt;&#10;&#10;        {/* Feedback Grid */}&#10;        &lt;div className={styles.feedbackGrid}&gt;&#10;          {feedbacks.map((feedback) =&gt; (&#10;            &lt;div key={feedback._id} className={styles.feedbackCard}&gt;&#10;              &lt;div className={styles.cardHeader}&gt;&#10;                &lt;div className={styles.userInfo}&gt;&#10;                  &lt;User size={16} /&gt;&#10;                  &lt;span className={styles.userName}&gt;{feedback.userName}&lt;/span&gt;&#10;                &lt;/div&gt;&#10;                &lt;div className={styles.cardMeta}&gt;&#10;                  {renderStars(feedback.rating)}&#10;                  &lt;span className={styles.date}&gt;&#10;                    &lt;Calendar size={14} /&gt;&#10;                    {new Date(feedback.createdAt).toLocaleDateString()}&#10;                  &lt;/span&gt;&#10;                &lt;/div&gt;&#10;              &lt;/div&gt;&#10;&#10;              &lt;div className={styles.category}&gt;&#10;                {categories.find(c =&gt; c.value === feedback.category)?.label}&#10;              &lt;/div&gt;&#10;&#10;              &lt;p className={styles.feedbackText}&gt;{feedback.feedback}&lt;/p&gt;&#10;&#10;              &lt;div className={styles.cardFooter}&gt;&#10;                &lt;div className={styles.status}&gt;&#10;                  &lt;span className={`${styles.statusBadge} ${getStatusColor(feedback.isPublic, feedback.isApproved)}`}&gt;&#10;                    &lt;Eye size={12} /&gt;&#10;                    {getStatusText(feedback.isPublic, feedback.isApproved)}&#10;                  &lt;/span&gt;&#10;                &lt;/div&gt;&#10;&#10;                {feedback.isPublic &amp;&amp; (&#10;                  &lt;div className={styles.actions}&gt;&#10;                    {!feedback.isApproved ? (&#10;                      &lt;&gt;&#10;                        &lt;button&#10;                          onClick={() =&gt; handleApproval(feedback._id, true)}&#10;                          className={styles.approveBtn}&#10;                          title=&quot;Approve feedback&quot;&#10;                        &gt;&#10;                          &lt;Check size={16} /&gt;&#10;                          Approve&#10;                        &lt;/button&gt;&#10;                        &lt;button&#10;                          onClick={() =&gt; handleApproval(feedback._id, false)}&#10;                          className={styles.rejectBtn}&#10;                          title=&quot;Reject feedback&quot;&#10;                        &gt;&#10;                          &lt;X size={16} /&gt;&#10;                          Reject&#10;                        &lt;/button&gt;&#10;                      &lt;/&gt;&#10;                    ) : (&#10;                      &lt;button&#10;                        onClick={() =&gt; handleApproval(feedback._id, false)}&#10;                        className={styles.unapproveBtn}&#10;                        title=&quot;Remove approval&quot;&#10;                      &gt;&#10;                        &lt;X size={16} /&gt;&#10;                        Unapprove&#10;                      &lt;/button&gt;&#10;                    )}&#10;                  &lt;/div&gt;&#10;                )}&#10;              &lt;/div&gt;&#10;            &lt;/div&gt;&#10;          ))}&#10;        &lt;/div&gt;&#10;&#10;        {feedbacks.length === 0 &amp;&amp; (&#10;          &lt;div className={styles.noFeedback}&gt;&#10;            &lt;p&gt;No feedback submissions yet.&lt;/p&gt;&#10;          &lt;/div&gt;&#10;        )}&#10;      &lt;/main&gt;&#10;    &lt;/div&gt;&#10;  )&#10;}&#10;" />
              <option name="updatedContent" value="'use client'&#13;&#10;&#13;&#10;import { useState, useEffect } from 'react'&#13;&#10;import { useRouter } from 'next/navigation'&#13;&#10;import Link from 'next/link'&#13;&#10;import {&#13;&#10;  LayoutDashboard,&#13;&#10;  Users,&#13;&#10;  MessageSquare,&#13;&#10;  Calendar,&#13;&#10;  FileText,&#13;&#10;  Settings,&#13;&#10;  LogOut,&#13;&#10;  Check,&#13;&#10;  X,&#13;&#10;  Eye,&#13;&#10;  Star,&#13;&#10;  User&#13;&#10;} from 'lucide-react'&#13;&#10;import styles from './feedback.module.css'&#13;&#10;import { getApiUrl, API_CONFIG } from '@/config/api';&#13;&#10;import Loading from &quot;../../components/Loading/Loading&quot;;&#13;&#10;&#13;&#10;interface FeedbackItem {&#13;&#10;  _id: string&#13;&#10;  userName: string&#13;&#10;  userEmail: string&#13;&#10;  rating: number&#13;&#10;  feedback: string&#13;&#10;  category: string&#13;&#10;  isPublic: boolean&#13;&#10;  isApproved: boolean&#13;&#10;  createdAt: string&#13;&#10;}&#13;&#10;&#13;&#10;export default function AdminFeedbackPage() {&#13;&#10;  const [user, setUser] = useState&lt;any&gt;(null)&#13;&#10;  const [feedbacks, setFeedbacks] = useState&lt;FeedbackItem[]&gt;([])&#13;&#10;  const [loading, setLoading] = useState(true)&#13;&#10;  const [feedbackLoading, setFeedbackLoading] = useState(true)&#13;&#10;  const [error, setError] = useState&lt;string | null&gt;(null)&#13;&#10;  const [success, setSuccess] = useState&lt;string | null&gt;(null)&#13;&#10;  const router = useRouter()&#13;&#10;&#13;&#10;  const categories = [&#13;&#10;    { value: 'general', label: 'General Feedback' },&#13;&#10;    { value: 'accuracy', label: 'Accuracy' },&#13;&#10;    { value: 'user_experience', label: 'User Experience' },&#13;&#10;    { value: 'support', label: 'Support' },&#13;&#10;    { value: 'feature_request', label: 'Feature Request' }&#13;&#10;  ]&#13;&#10;&#13;&#10;  useEffect(() =&gt; {&#13;&#10;    checkAuth()&#13;&#10;    fetchAllFeedback()&#13;&#10;  }, [])&#13;&#10;&#13;&#10;  const checkAuth = async () =&gt; {&#13;&#10;    try {&#13;&#10;      const token = localStorage.getItem('adminToken')&#13;&#10;      if (!token) {&#13;&#10;        router.push('/admin/auth')&#13;&#10;        return&#13;&#10;      }&#13;&#10;&#13;&#10;      // For admin pages, we can directly check the stored admin info&#13;&#10;      const adminInfo = localStorage.getItem('adminInfo')&#13;&#10;      if (adminInfo) {&#13;&#10;        const admin = JSON.parse(adminInfo)&#13;&#10;        if (admin.role === 'admin') {&#13;&#10;          setUser(admin)&#13;&#10;        } else {&#13;&#10;          router.push('/admin/auth')&#13;&#10;          return&#13;&#10;        }&#13;&#10;      } else {&#13;&#10;        router.push('/admin/auth')&#13;&#10;        return&#13;&#10;      }&#13;&#10;    } catch (error) {&#13;&#10;      console.error('Auth check failed:', error)&#13;&#10;      router.push('/admin/auth')&#13;&#10;    } finally {&#13;&#10;      setLoading(false)&#13;&#10;    }&#13;&#10;  }&#13;&#10;&#13;&#10;  const fetchAllFeedback = async () =&gt; {&#13;&#10;    setFeedbackLoading(true)&#13;&#10;    try {&#13;&#10;      const token = localStorage.getItem('adminToken')&#13;&#10;      const response = await fetch(getApiUrl(API_CONFIG.ENDPOINTS.FEEDBACK.ADMIN_ALL), {&#13;&#10;        headers: {&#13;&#10;          'Authorization': `Bearer ${token}`&#13;&#10;        }&#13;&#10;      })&#13;&#10;&#13;&#10;      if (response.ok) {&#13;&#10;        const data = await response.json()&#13;&#10;        setFeedbacks(data.data)&#13;&#10;        setError(null)&#13;&#10;      } else {&#13;&#10;        const errorData = await response.json()&#13;&#10;        setError(errorData.message || 'Failed to fetch feedback')&#13;&#10;      }&#13;&#10;    } catch (error) {&#13;&#10;      console.error('Error fetching feedback:', error)&#13;&#10;      setError('Network error. Please check your connection.')&#13;&#10;    } finally {&#13;&#10;      setFeedbackLoading(false)&#13;&#10;    }&#13;&#10;  }&#13;&#10;&#13;&#10;  const handleApproval = async (feedbackId: string, isApproved: boolean) =&gt; {&#13;&#10;    try {&#13;&#10;      const token = localStorage.getItem('adminToken')&#13;&#10;      const response = await fetch(getApiUrl(`${API_CONFIG.ENDPOINTS.FEEDBACK.ADMIN_APPROVE}/${feedbackId}/approve`), {&#13;&#10;        method: 'PATCH',&#13;&#10;        headers: {&#13;&#10;          'Content-Type': 'application/json',&#13;&#10;          'Authorization': `Bearer ${token}`&#13;&#10;        },&#13;&#10;        body: JSON.stringify({ isApproved })&#13;&#10;      })&#13;&#10;&#13;&#10;      if (response.ok) {&#13;&#10;        setSuccess(`Feedback ${isApproved ? 'approved' : 'rejected'} successfully!`)&#13;&#10;        await fetchAllFeedback()&#13;&#10;        setTimeout(() =&gt; setSuccess(null), 3000)&#13;&#10;      } else {&#13;&#10;        const errorData = await response.json()&#13;&#10;        setError(errorData.message || 'Failed to update feedback')&#13;&#10;      }&#13;&#10;    } catch (error) {&#13;&#10;      console.error('Error updating feedback:', error)&#13;&#10;      setError('Network error. Please try again.')&#13;&#10;    }&#13;&#10;  }&#13;&#10;&#13;&#10;  const handleLogout = () =&gt; {&#13;&#10;    localStorage.removeItem('adminToken')&#13;&#10;    localStorage.removeItem('adminInfo')&#13;&#10;    router.push('/admin/auth')&#13;&#10;  }&#13;&#10;&#13;&#10;  const renderStars = (rating: number) =&gt; {&#13;&#10;    return (&#13;&#10;      &lt;div className={styles.rating}&gt;&#13;&#10;        {[1, 2, 3, 4, 5].map((star) =&gt; (&#13;&#10;          &lt;Star&#13;&#10;            key={star}&#13;&#10;            size={16}&#13;&#10;            className={`${styles.star} ${star &lt;= rating ? styles.filled : ''}`}&#13;&#10;          /&gt;&#13;&#10;        ))}&#13;&#10;      &lt;/div&gt;&#13;&#10;    )&#13;&#10;  }&#13;&#10;&#13;&#10;  const getStatusColor = (isPublic: boolean, isApproved: boolean) =&gt; {&#13;&#10;    if (!isPublic) return styles.private&#13;&#10;    return isApproved ? styles.approved : styles.pending&#13;&#10;  }&#13;&#10;&#13;&#10;  const getStatusText = (isPublic: boolean, isApproved: boolean) =&gt; {&#13;&#10;    if (!isPublic) return 'Private'&#13;&#10;    return isApproved ? 'Approved' : 'Pending'&#13;&#10;  }&#13;&#10;&#13;&#10;  if (loading) {&#13;&#10;    return &lt;Loading /&gt;&#13;&#10;  }&#13;&#10;&#13;&#10;  return (&#13;&#10;    &lt;div className={styles.container}&gt;&#13;&#10;      {/* Sidebar */}&#13;&#10;      &lt;aside className={styles.sidebar}&gt;&#13;&#10;        &lt;div className={styles.logo}&gt;&#13;&#10;          &lt;LayoutDashboard size={24} /&gt;&#13;&#10;          &lt;span&gt;Admin Panel&lt;/span&gt;&#13;&#10;        &lt;/div&gt;&#13;&#10;&#13;&#10;        &lt;nav className={styles.navigation}&gt;&#13;&#10;          &lt;Link href=&quot;/admin/dashboard&quot; className={styles.navItem}&gt;&#13;&#10;            &lt;LayoutDashboard size={20} /&gt;&#13;&#10;            Dashboard&#13;&#10;          &lt;/Link&gt;&#13;&#10;          &lt;Link href=&quot;/admin/users&quot; className={styles.navItem}&gt;&#13;&#10;            &lt;Users size={20} /&gt;&#13;&#10;            Users&#13;&#10;          &lt;/Link&gt;&#13;&#10;          &lt;Link href=&quot;/admin/doctors&quot; className={styles.navItem}&gt;&#13;&#10;            &lt;Users size={20} /&gt;&#13;&#10;            Doctors&#13;&#10;          &lt;/Link&gt;&#13;&#10;          &lt;Link href=&quot;/admin/appointments&quot; className={styles.navItem}&gt;&#13;&#10;            &lt;Calendar size={20} /&gt;&#13;&#10;            Appointments&#13;&#10;          &lt;/Link&gt;&#13;&#10;          &lt;Link href=&quot;/admin/feedback&quot; className={`${styles.navItem} ${styles.active}`}&gt;&#13;&#10;            &lt;MessageSquare size={20} /&gt;&#13;&#10;            Feedback&#13;&#10;          &lt;/Link&gt;&#13;&#10;          &lt;Link href=&quot;/admin/reports&quot; className={styles.navItem}&gt;&#13;&#10;            &lt;FileText size={20} /&gt;&#13;&#10;            Reports&#13;&#10;          &lt;/Link&gt;&#13;&#10;          &lt;Link href=&quot;/admin/settings&quot; className={styles.navItem}&gt;&#13;&#10;            &lt;Settings size={20} /&gt;&#13;&#10;            Settings&#13;&#10;          &lt;/Link&gt;&#13;&#10;        &lt;/nav&gt;&#13;&#10;&#13;&#10;        &lt;div className={styles.sidebarFooter}&gt;&#13;&#10;          &lt;button onClick={handleLogout} className={styles.logoutBtn}&gt;&#13;&#10;            &lt;LogOut size={20} /&gt;&#13;&#10;            Logout&#13;&#10;          &lt;/button&gt;&#13;&#10;        &lt;/div&gt;&#13;&#10;      &lt;/aside&gt;&#13;&#10;&#13;&#10;      {/* Main Content */}&#13;&#10;      &lt;main className={styles.main}&gt;&#13;&#10;        &lt;header className={styles.header}&gt;&#13;&#10;          &lt;div className={styles.headerLeft}&gt;&#13;&#10;            &lt;h1&gt;Feedback Management&lt;/h1&gt;&#13;&#10;            &lt;p&gt;Review and approve user feedback for public testimonials&lt;/p&gt;&#13;&#10;          &lt;/div&gt;&#13;&#10;          &lt;div className={styles.headerRight}&gt;&#13;&#10;            &lt;div className={styles.adminProfile}&gt;&#13;&#10;              {user?.profile_pic ? (&#13;&#10;                &lt;img&#13;&#10;                  src={user.profile_pic}&#13;&#10;                  alt={user.name}&#13;&#10;                  className={styles.avatar}&#13;&#10;                  onError={(e) =&gt; {&#13;&#10;                    const target = e.target as HTMLImageElement;&#13;&#10;                    target.style.display = 'none';&#13;&#10;                    target.nextElementSibling?.classList.remove(styles.hidden);&#13;&#10;                  }}&#13;&#10;                /&gt;&#13;&#10;              ) : null}&#13;&#10;              &lt;div className={`${styles.avatar} ${user?.profile_pic ? styles.hidden : ''}`}&gt;&#13;&#10;                {user?.name?.charAt(0).toUpperCase()}&#13;&#10;              &lt;/div&gt;&#13;&#10;              &lt;span&gt;{user?.name}&lt;/span&gt;&#13;&#10;            &lt;/div&gt;&#13;&#10;          &lt;/div&gt;&#13;&#10;        &lt;/header&gt;&#13;&#10;&#13;&#10;        {error &amp;&amp; &lt;div className={styles.error}&gt;{error}&lt;/div&gt;}&#13;&#10;        {success &amp;&amp; &lt;div className={styles.success}&gt;{success}&lt;/div&gt;}&#13;&#10;&#13;&#10;        {/* Stats */}&#13;&#10;        &lt;div className={styles.statsGrid}&gt;&#13;&#10;          &lt;div className={styles.statCard}&gt;&#13;&#10;            &lt;div className={styles.statIcon}&gt;&#13;&#10;              &lt;MessageSquare size={24} /&gt;&#13;&#10;            &lt;/div&gt;&#13;&#10;            &lt;div className={styles.statContent}&gt;&#13;&#10;              &lt;h3&gt;{feedbacks.length}&lt;/h3&gt;&#13;&#10;              &lt;p&gt;Total Feedback&lt;/p&gt;&#13;&#10;            &lt;/div&gt;&#13;&#10;          &lt;/div&gt;&#13;&#10;&#13;&#10;          &lt;div className={styles.statCard}&gt;&#13;&#10;            &lt;div className={styles.statIcon}&gt;&#13;&#10;              &lt;Eye size={24} /&gt;&#13;&#10;            &lt;/div&gt;&#13;&#10;            &lt;div className={styles.statContent}&gt;&#13;&#10;              &lt;h3&gt;{feedbacks.filter(f =&gt; f.isPublic &amp;&amp; !f.isApproved).length}&lt;/h3&gt;&#13;&#10;              &lt;p&gt;Pending Approval&lt;/p&gt;&#13;&#10;            &lt;/div&gt;&#13;&#10;          &lt;/div&gt;&#13;&#10;&#13;&#10;          &lt;div className={styles.statCard}&gt;&#13;&#10;            &lt;div className={styles.statIcon}&gt;&#13;&#10;              &lt;Check size={24} /&gt;&#13;&#10;            &lt;/div&gt;&#13;&#10;            &lt;div className={styles.statContent}&gt;&#13;&#10;              &lt;h3&gt;{feedbacks.filter(f =&gt; f.isApproved).length}&lt;/h3&gt;&#13;&#10;              &lt;p&gt;Approved&lt;/p&gt;&#13;&#10;            &lt;/div&gt;&#13;&#10;          &lt;/div&gt;&#13;&#10;        &lt;/div&gt;&#13;&#10;&#13;&#10;        {/* Feedback Grid */}&#13;&#10;        &lt;div className={styles.feedbackGrid}&gt;&#13;&#10;          {feedbackLoading ? (&#13;&#10;            &lt;div className={styles.loadingContainer}&gt;&#13;&#10;              &lt;Loading /&gt;&#13;&#10;              &lt;p style={{ textAlign: 'center', marginTop: '1rem', color: '#6b7280' }}&gt;&#13;&#10;                Loading feedback submissions...&#13;&#10;              &lt;/p&gt;&#13;&#10;            &lt;/div&gt;&#13;&#10;          ) : feedbacks.length &gt; 0 ? (&#13;&#10;            feedbacks.map((feedback) =&gt; (&#13;&#10;              &lt;div key={feedback._id} className={styles.feedbackCard}&gt;&#13;&#10;                &lt;div className={styles.cardHeader}&gt;&#13;&#10;                  &lt;div className={styles.userInfo}&gt;&#13;&#10;                    &lt;User size={16} /&gt;&#13;&#10;                    &lt;span className={styles.userName}&gt;{feedback.userName}&lt;/span&gt;&#13;&#10;                  &lt;/div&gt;&#13;&#10;                  &lt;div className={styles.cardMeta}&gt;&#13;&#10;                    {renderStars(feedback.rating)}&#13;&#10;                    &lt;span className={styles.date}&gt;&#13;&#10;                      &lt;Calendar size={14} /&gt;&#13;&#10;                      {new Date(feedback.createdAt).toLocaleDateString()}&#13;&#10;                    &lt;/span&gt;&#13;&#10;                  &lt;/div&gt;&#13;&#10;                &lt;/div&gt;&#13;&#10;&#13;&#10;                &lt;div className={styles.category}&gt;&#13;&#10;                  {categories.find(c =&gt; c.value === feedback.category)?.label}&#13;&#10;                &lt;/div&gt;&#13;&#10;&#13;&#10;                &lt;p className={styles.feedbackText}&gt;{feedback.feedback}&lt;/p&gt;&#13;&#10;&#13;&#10;                &lt;div className={styles.cardFooter}&gt;&#13;&#10;                  &lt;div className={styles.status}&gt;&#13;&#10;                    &lt;span className={`${styles.statusBadge} ${getStatusColor(feedback.isPublic, feedback.isApproved)}`}&gt;&#13;&#10;                      &lt;Eye size={12} /&gt;&#13;&#10;                      {getStatusText(feedback.isPublic, feedback.isApproved)}&#13;&#10;                    &lt;/span&gt;&#13;&#10;                  &lt;/div&gt;&#13;&#10;&#13;&#10;                  {feedback.isPublic &amp;&amp; (&#13;&#10;                    &lt;div className={styles.actions}&gt;&#13;&#10;                      {!feedback.isApproved ? (&#13;&#10;                        &lt;&gt;&#13;&#10;                          &lt;button&#13;&#10;                            onClick={() =&gt; handleApproval(feedback._id, true)}&#13;&#10;                            className={styles.approveBtn}&#13;&#10;                            title=&quot;Approve feedback&quot;&#13;&#10;                          &gt;&#13;&#10;                            &lt;Check size={16} /&gt;&#13;&#10;                            Approve&#13;&#10;                          &lt;/button&gt;&#13;&#10;                          &lt;button&#13;&#10;                            onClick={() =&gt; handleApproval(feedback._id, false)}&#13;&#10;                            className={styles.rejectBtn}&#13;&#10;                            title=&quot;Reject feedback&quot;&#13;&#10;                          &gt;&#13;&#10;                            &lt;X size={16} /&gt;&#13;&#10;                            Reject&#13;&#10;                          &lt;/button&gt;&#13;&#10;                        &lt;/&gt;&#13;&#10;                      ) : (&#13;&#10;                        &lt;button&#13;&#10;                          onClick={() =&gt; handleApproval(feedback._id, false)}&#13;&#10;                          className={styles.unapproveBtn}&#13;&#10;                          title=&quot;Remove approval&quot;&#13;&#10;                        &gt;&#13;&#10;                          &lt;X size={16} /&gt;&#13;&#10;                          Unapprove&#13;&#10;                        &lt;/button&gt;&#13;&#10;                      )}&#13;&#10;                    &lt;/div&gt;&#13;&#10;                  )}&#13;&#10;                &lt;/div&gt;&#13;&#10;              &lt;/div&gt;&#13;&#10;            ))&#13;&#10;          ) : (&#13;&#10;            &lt;div className={styles.noFeedback}&gt;&#13;&#10;              &lt;p&gt;No feedback submissions yet.&lt;/p&gt;&#13;&#10;            &lt;/div&gt;&#13;&#10;          )}&#13;&#10;        &lt;/div&gt;&#13;&#10;      &lt;/main&gt;&#13;&#10;    &lt;/div&gt;&#13;&#10;  )&#13;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>