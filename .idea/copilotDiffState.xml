<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/app/admin/feedback/feedback.module.css">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/admin/feedback/feedback.module.css" />
              <option name="originalContent" value="/* Admin Feedback Page Styles - Matching admin dashboard design */&#10;&#10;.container {&#10;  min-height: 100vh;&#10;  display: flex;&#10;  background: linear-gradient(135deg, #f6f8ff 0%, #f0f4ff 100%);&#10;  position: relative;&#10;  overflow-x: hidden;&#10;}&#10;&#10;.sidebar {&#10;  width: 280px;&#10;  background: white;&#10;  padding: 1.5rem;&#10;  display: flex;&#10;  flex-direction: column;&#10;  border-right: 1px solid #e5e7eb;&#10;  position: fixed;&#10;  height: 100vh;&#10;  transition: transform 0.3s ease-in-out;&#10;  z-index: 90;&#10;}&#10;&#10;.logo {&#10;  display: flex;&#10;  align-items: center;&#10;  gap: 0.75rem;&#10;  padding-bottom: 1.5rem;&#10;  margin-bottom: 1.5rem;&#10;  border-bottom: 1px solid #e5e7eb;&#10;  color: #9333ea;&#10;  font-weight: 600;&#10;  font-size: 1.125rem;&#10;}&#10;&#10;.logo span {&#10;  color: #111827;&#10;  white-space: nowrap;&#10;}&#10;&#10;.navigation {&#10;  display: flex;&#10;  flex-direction: column;&#10;  gap: 0.5rem;&#10;  width: 100%;&#10;}&#10;&#10;.navItem {&#10;  display: flex;&#10;  align-items: center;&#10;  gap: 0.75rem;&#10;  padding: 0.75rem 1rem;&#10;  color: #4b5563;&#10;  text-decoration: none;&#10;  border-radius: 0.5rem;&#10;  transition: all 0.2s ease;&#10;  width: 100%;&#10;  white-space: nowrap;&#10;}&#10;&#10;.navItem:hover {&#10;  background: #f3f4f6;&#10;  color: #7928ca;&#10;}&#10;&#10;.navItem.active {&#10;  background: #f3e8ff;&#10;  color: #9333ea;&#10;}&#10;&#10;.sidebarFooter {&#10;  margin-top: auto;&#10;}&#10;&#10;.logoutBtn {&#10;  display: flex;&#10;  align-items: center;&#10;  gap: 0.75rem;&#10;  padding: 0.75rem 1rem;&#10;  color: #dc2626;&#10;  text-decoration: none;&#10;  border-radius: 0.5rem;&#10;  transition: all 0.2s ease;&#10;  border: none;&#10;  background: none;&#10;  font-size: 0.875rem;&#10;  width: 100%;&#10;  text-align: left;&#10;  cursor: pointer;&#10;}&#10;&#10;.logoutBtn:hover {&#10;  background: #fee2e2;&#10;}&#10;&#10;.main {&#10;  flex: 1;&#10;  margin-left: 280px;&#10;  padding: 2rem;&#10;}&#10;&#10;.header {&#10;  display: flex;&#10;  justify-content: space-between;&#10;  align-items: center;&#10;  margin-bottom: 2rem;&#10;  padding: 0 1rem;&#10;}&#10;&#10;.headerLeft h1 {&#10;  font-size: 1.875rem;&#10;  font-weight: 700;&#10;  color: #111827;&#10;  margin: 0 0 0.5rem 0;&#10;}&#10;&#10;.headerLeft p {&#10;  color: #6b7280;&#10;  margin: 0;&#10;}&#10;&#10;.headerRight {&#10;  display: flex;&#10;  gap: 1rem;&#10;  align-items: center;&#10;}&#10;&#10;.adminProfile {&#10;  display: flex;&#10;  align-items: center;&#10;  gap: 0.75rem;&#10;}&#10;&#10;.avatar {&#10;  width: 40px;&#10;  height: 40px;&#10;  border-radius: 50%;&#10;  background: #9333ea;&#10;  color: white;&#10;  display: flex;&#10;  align-items: center;&#10;  justify-content: center;&#10;  font-weight: 600;&#10;}&#10;&#10;.avatar img {&#10;  width: 100%;&#10;  height: 100%;&#10;  border-radius: 50%;&#10;  object-fit: cover;&#10;}&#10;&#10;.error {&#10;  background: #fee2e2;&#10;  color: #dc2626;&#10;  padding: 1rem;&#10;  border-radius: 0.5rem;&#10;  margin-bottom: 1rem;&#10;  border: 1px solid #fecaca;&#10;}&#10;&#10;.success {&#10;  background: #d1fae5;&#10;  color: #065f46;&#10;  padding: 1rem;&#10;  border-radius: 0.5rem;&#10;  margin-bottom: 1rem;&#10;  border: 1px solid #a7f3d0;&#10;}&#10;&#10;.statsGrid {&#10;  display: grid;&#10;  grid-template-columns: repeat(3, 1fr);&#10;  gap: 1.5rem;&#10;  margin-bottom: 2rem;&#10;}&#10;&#10;.statCard {&#10;  background: white;&#10;  padding: 1.5rem;&#10;  border-radius: 1.5rem;&#10;  box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);&#10;  transition: transform 0.3s ease;&#10;  display: flex;&#10;  align-items: center;&#10;  gap: 1rem;&#10;}&#10;&#10;.statCard:hover {&#10;  transform: translateY(-5px);&#10;  box-shadow: 0 8px 16px rgba(0, 0, 0, 0.1);&#10;}&#10;&#10;.statIcon {&#10;  color: #9333ea;&#10;  background: #f3e8ff;&#10;  padding: 1rem;&#10;  border-radius: 1rem;&#10;}&#10;&#10;.statContent h3 {&#10;  font-size: 1.875rem;&#10;  font-weight: 700;&#10;  color: #111827;&#10;  margin: 0 0 0.25rem 0;&#10;}&#10;&#10;.statContent p {&#10;  color: #6b7280;&#10;  font-size: 0.875rem;&#10;  margin: 0;&#10;}&#10;&#10;.feedbackGrid {&#10;  display: grid;&#10;  grid-template-columns: repeat(auto-fill, minmax(400px, 1fr));&#10;  gap: 1.5rem;&#10;}&#10;&#10;.feedbackCard {&#10;  background: white;&#10;  padding: 1.5rem;&#10;  border-radius: 1rem;&#10;  box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);&#10;  transition: transform 0.2s ease;&#10;}&#10;&#10;.feedbackCard:hover {&#10;  transform: translateY(-2px);&#10;  box-shadow: 0 8px 16px rgba(0, 0, 0, 0.1);&#10;}&#10;&#10;.cardHeader {&#10;  display: flex;&#10;  justify-content: space-between;&#10;  align-items: flex-start;&#10;  margin-bottom: 1rem;&#10;}&#10;&#10;.userInfo {&#10;  display: flex;&#10;  align-items: center;&#10;  gap: 0.5rem;&#10;}&#10;&#10;.userName {&#10;  font-weight: 600;&#10;  color: #111827;&#10;}&#10;&#10;.cardMeta {&#10;  display: flex;&#10;  flex-direction: column;&#10;  align-items: flex-end;&#10;  gap: 0.5rem;&#10;}&#10;&#10;.rating {&#10;  display: flex;&#10;  gap: 0.25rem;&#10;}&#10;&#10;.star {&#10;  color: #d1d5db;&#10;}&#10;&#10;.star.filled {&#10;  color: #fbbf24;&#10;}&#10;&#10;.date {&#10;  display: flex;&#10;  align-items: center;&#10;  gap: 0.25rem;&#10;  font-size: 0.75rem;&#10;  color: #6b7280;&#10;}&#10;&#10;.category {&#10;  background: #f3e8ff;&#10;  color: #9333ea;&#10;  padding: 0.25rem 0.75rem;&#10;  border-radius: 9999px;&#10;  font-size: 0.75rem;&#10;  font-weight: 500;&#10;  margin-bottom: 1rem;&#10;  width: fit-content;&#10;}&#10;&#10;.feedbackText {&#10;  color: #374151;&#10;  line-height: 1.6;&#10;  margin-bottom: 1rem;&#10;}&#10;&#10;.cardFooter {&#10;  display: flex;&#10;  justify-content: space-between;&#10;  align-items: center;&#10;}&#10;&#10;.status {&#10;  display: flex;&#10;  align-items: center;&#10;}&#10;&#10;.statusBadge {&#10;  display: flex;&#10;  align-items: center;&#10;  gap: 0.25rem;&#10;  padding: 0.25rem 0.75rem;&#10;  border-radius: 9999px;&#10;  font-size: 0.75rem;&#10;  font-weight: 500;&#10;}&#10;&#10;.statusBadge.private {&#10;  background: #f3f4f6;&#10;  color: #6b7280;&#10;}&#10;&#10;.statusBadge.approved {&#10;  background: #d1fae5;&#10;  color: #065f46;&#10;}&#10;&#10;.statusBadge.pending {&#10;  background: #fef3c7;&#10;  color: #92400e;&#10;}&#10;&#10;.actions {&#10;  display: flex;&#10;  gap: 0.5rem;&#10;}&#10;&#10;.approveBtn, .rejectBtn, .unapproveBtn {&#10;  display: flex;&#10;  align-items: center;&#10;  gap: 0.25rem;&#10;  padding: 0.375rem 0.75rem;&#10;  border: none;&#10;  border-radius: 0.375rem;&#10;  font-size: 0.75rem;&#10;  font-weight: 500;&#10;  cursor: pointer;&#10;  transition: all 0.2s ease;&#10;}&#10;&#10;.approveBtn {&#10;  background: #d1fae5;&#10;  color: #065f46;&#10;}&#10;&#10;.approveBtn:hover {&#10;  background: #a7f3d0;&#10;}&#10;&#10;.rejectBtn, .unapproveBtn {&#10;  background: #fee2e2;&#10;  color: #dc2626;&#10;}&#10;&#10;.rejectBtn:hover, .unapproveBtn:hover {&#10;  background: #fecaca;&#10;}&#10;&#10;.noFeedback {&#10;  text-align: center;&#10;  padding: 3rem;&#10;  color: #6b7280;&#10;  font-style: italic;&#10;}&#10;&#10;.loading {&#10;  display: flex;&#10;  flex-direction: column;&#10;  align-items: center;&#10;  justify-content: center;&#10;  min-height: 100vh;&#10;  gap: 1rem;&#10;}&#10;&#10;.spinner {&#10;  width: 40px;&#10;  height: 40px;&#10;  border: 4px solid #f3f4f6;&#10;  border-top: 4px solid #9333ea;&#10;  border-radius: 50%;&#10;  animation: spin 1s linear infinite;&#10;}&#10;&#10;@keyframes spin {&#10;  0% { transform: rotate(0deg); }&#10;  100% { transform: rotate(360deg); }&#10;}&#10;&#10;/* Responsive Design */&#10;@media (max-width: 1200px) {&#10;  .statsGrid {&#10;    grid-template-columns: repeat(2, 1fr);&#10;  }&#10;&#10;  .feedbackGrid {&#10;    grid-template-columns: repeat(auto-fill, minmax(350px, 1fr));&#10;  }&#10;}&#10;&#10;@media (max-width: 768px) {&#10;  .sidebar {&#10;    width: 240px;&#10;    padding: 1rem;&#10;    transform: translateX(-100%);&#10;  }&#10;&#10;  .main {&#10;    margin-left: 0;&#10;    padding: 1rem;&#10;  }&#10;&#10;  .header {&#10;    flex-direction: column;&#10;    align-items: flex-start;&#10;    gap: 1rem;&#10;  }&#10;&#10;  .statsGrid {&#10;    grid-template-columns: 1fr;&#10;  }&#10;&#10;  .feedbackGrid {&#10;    grid-template-columns: 1fr;&#10;  }&#10;&#10;  .cardHeader {&#10;    flex-direction: column;&#10;    align-items: flex-start;&#10;    gap: 0.5rem;&#10;  }&#10;&#10;  .cardMeta {&#10;    align-items: flex-start;&#10;  }&#10;}&#10;&#10;@media (max-width: 480px) {&#10;  .feedbackCard {&#10;    padding: 1rem;&#10;  }&#10;&#10;  .cardFooter {&#10;    flex-direction: column;&#10;    align-items: flex-start;&#10;    gap: 0.75rem;&#10;  }&#10;}&#10;&#10;.hidden {&#10;  display: none !important;&#10;}&#10;" />
              <option name="updatedContent" value="/* Admin Feedback Page Styles - Matching admin dashboard design */&#13;&#10;&#13;&#10;.container {&#13;&#10;  min-height: 100vh;&#13;&#10;  display: flex;&#13;&#10;  background: linear-gradient(135deg, #f6f8ff 0%, #f0f4ff 100%);&#13;&#10;  position: relative;&#13;&#10;  overflow-x: hidden;&#13;&#10;}&#13;&#10;&#13;&#10;.sidebar {&#13;&#10;  width: 280px;&#13;&#10;  background: white;&#13;&#10;  padding: 1.5rem;&#13;&#10;  display: flex;&#13;&#10;  flex-direction: column;&#13;&#10;  border-right: 1px solid #e5e7eb;&#13;&#10;  position: fixed;&#13;&#10;  height: 100vh;&#13;&#10;  transition: transform 0.3s ease-in-out;&#13;&#10;  z-index: 90;&#13;&#10;}&#13;&#10;&#13;&#10;.logo {&#13;&#10;  display: flex;&#13;&#10;  align-items: center;&#13;&#10;  gap: 0.75rem;&#13;&#10;  padding-bottom: 1.5rem;&#13;&#10;  margin-bottom: 1.5rem;&#13;&#10;  border-bottom: 1px solid #e5e7eb;&#13;&#10;  color: #9333ea;&#13;&#10;  font-weight: 600;&#13;&#10;  font-size: 1.125rem;&#13;&#10;}&#13;&#10;&#13;&#10;.logo span {&#13;&#10;  color: #111827;&#13;&#10;  white-space: nowrap;&#13;&#10;}&#13;&#10;&#13;&#10;.navigation {&#13;&#10;  display: flex;&#13;&#10;  flex-direction: column;&#13;&#10;  gap: 0.5rem;&#13;&#10;  width: 100%;&#13;&#10;}&#13;&#10;&#13;&#10;.navItem {&#13;&#10;  display: flex;&#13;&#10;  align-items: center;&#13;&#10;  gap: 0.75rem;&#13;&#10;  padding: 0.75rem 1rem;&#13;&#10;  color: #4b5563;&#13;&#10;  text-decoration: none;&#13;&#10;  border-radius: 0.5rem;&#13;&#10;  transition: all 0.2s ease;&#13;&#10;  width: 100%;&#13;&#10;  white-space: nowrap;&#13;&#10;}&#13;&#10;&#13;&#10;.navItem:hover {&#13;&#10;  background: #f3f4f6;&#13;&#10;  color: #7928ca;&#13;&#10;}&#13;&#10;&#13;&#10;.navItem.active {&#13;&#10;  background: #f3e8ff;&#13;&#10;  color: #9333ea;&#13;&#10;}&#13;&#10;&#13;&#10;.sidebarFooter {&#13;&#10;  margin-top: auto;&#13;&#10;}&#13;&#10;&#13;&#10;.logoutBtn {&#13;&#10;  display: flex;&#13;&#10;  align-items: center;&#13;&#10;  gap: 0.75rem;&#13;&#10;  padding: 0.75rem 1rem;&#13;&#10;  color: #dc2626;&#13;&#10;  text-decoration: none;&#13;&#10;  border-radius: 0.5rem;&#13;&#10;  transition: all 0.2s ease;&#13;&#10;  border: none;&#13;&#10;  background: none;&#13;&#10;  font-size: 0.875rem;&#13;&#10;  width: 100%;&#13;&#10;  text-align: left;&#13;&#10;  cursor: pointer;&#13;&#10;}&#13;&#10;&#13;&#10;.logoutBtn:hover {&#13;&#10;  background: #fee2e2;&#13;&#10;}&#13;&#10;&#13;&#10;.main {&#13;&#10;  flex: 1;&#13;&#10;  margin-left: 280px;&#13;&#10;  padding: 2rem;&#13;&#10;}&#13;&#10;&#13;&#10;.header {&#13;&#10;  display: flex;&#13;&#10;  justify-content: space-between;&#13;&#10;  align-items: center;&#13;&#10;  margin-bottom: 2rem;&#13;&#10;  padding: 0 1rem;&#13;&#10;}&#13;&#10;&#13;&#10;.headerLeft h1 {&#13;&#10;  font-size: 1.875rem;&#13;&#10;  font-weight: 700;&#13;&#10;  color: #111827;&#13;&#10;  margin: 0 0 0.5rem 0;&#13;&#10;}&#13;&#10;&#13;&#10;.headerLeft p {&#13;&#10;  color: #6b7280;&#13;&#10;  margin: 0;&#13;&#10;}&#13;&#10;&#13;&#10;.headerRight {&#13;&#10;  display: flex;&#13;&#10;  gap: 1rem;&#13;&#10;  align-items: center;&#13;&#10;}&#13;&#10;&#13;&#10;.adminProfile {&#13;&#10;  display: flex;&#13;&#10;  align-items: center;&#13;&#10;  gap: 0.75rem;&#13;&#10;}&#13;&#10;&#13;&#10;.avatar {&#13;&#10;  width: 40px;&#13;&#10;  height: 40px;&#13;&#10;  border-radius: 50%;&#13;&#10;  background: #9333ea;&#13;&#10;  color: white;&#13;&#10;  display: flex;&#13;&#10;  align-items: center;&#13;&#10;  justify-content: center;&#13;&#10;  font-weight: 600;&#13;&#10;}&#13;&#10;&#13;&#10;.avatar img {&#13;&#10;  width: 100%;&#13;&#10;  height: 100%;&#13;&#10;  border-radius: 50%;&#13;&#10;  object-fit: cover;&#13;&#10;}&#13;&#10;&#13;&#10;.error {&#13;&#10;  background: #fee2e2;&#13;&#10;  color: #dc2626;&#13;&#10;  padding: 1rem;&#13;&#10;  border-radius: 0.5rem;&#13;&#10;  margin-bottom: 1rem;&#13;&#10;  border: 1px solid #fecaca;&#13;&#10;}&#13;&#10;&#13;&#10;.success {&#13;&#10;  background: #d1fae5;&#13;&#10;  color: #065f46;&#13;&#10;  padding: 1rem;&#13;&#10;  border-radius: 0.5rem;&#13;&#10;  margin-bottom: 1rem;&#13;&#10;  border: 1px solid #a7f3d0;&#13;&#10;}&#13;&#10;&#13;&#10;.statsGrid {&#13;&#10;  display: grid;&#13;&#10;  grid-template-columns: repeat(3, 1fr);&#13;&#10;  gap: 1.5rem;&#13;&#10;  margin-bottom: 2rem;&#13;&#10;}&#13;&#10;&#13;&#10;.statCard {&#13;&#10;  background: white;&#13;&#10;  padding: 1.5rem;&#13;&#10;  border-radius: 1.5rem;&#13;&#10;  box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);&#13;&#10;  transition: transform 0.3s ease;&#13;&#10;  display: flex;&#13;&#10;  align-items: center;&#13;&#10;  gap: 1rem;&#13;&#10;}&#13;&#10;&#13;&#10;.statCard:hover {&#13;&#10;  transform: translateY(-5px);&#13;&#10;  box-shadow: 0 8px 16px rgba(0, 0, 0, 0.1);&#13;&#10;}&#13;&#10;&#13;&#10;.statIcon {&#13;&#10;  color: #9333ea;&#13;&#10;  background: #f3e8ff;&#13;&#10;  padding: 1rem;&#13;&#10;  border-radius: 1rem;&#13;&#10;}&#13;&#10;&#13;&#10;.statContent h3 {&#13;&#10;  font-size: 1.875rem;&#13;&#10;  font-weight: 700;&#13;&#10;  color: #111827;&#13;&#10;  margin: 0 0 0.25rem 0;&#13;&#10;}&#13;&#10;&#13;&#10;.statContent p {&#13;&#10;  color: #6b7280;&#13;&#10;  font-size: 0.875rem;&#13;&#10;  margin: 0;&#13;&#10;}&#13;&#10;&#13;&#10;.feedbackGrid {&#13;&#10;  display: grid;&#13;&#10;  grid-template-columns: repeat(auto-fill, minmax(400px, 1fr));&#13;&#10;  gap: 1.5rem;&#13;&#10;}&#13;&#10;&#13;&#10;.feedbackCard {&#13;&#10;  background: white;&#13;&#10;  padding: 1.5rem;&#13;&#10;  border-radius: 1rem;&#13;&#10;  box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);&#13;&#10;  transition: transform 0.2s ease;&#13;&#10;}&#13;&#10;&#13;&#10;.feedbackCard:hover {&#13;&#10;  transform: translateY(-2px);&#13;&#10;  box-shadow: 0 8px 16px rgba(0, 0, 0, 0.1);&#13;&#10;}&#13;&#10;&#13;&#10;.cardHeader {&#13;&#10;  display: flex;&#13;&#10;  justify-content: space-between;&#13;&#10;  align-items: flex-start;&#13;&#10;  margin-bottom: 1rem;&#13;&#10;}&#13;&#10;&#13;&#10;.userInfo {&#13;&#10;  display: flex;&#13;&#10;  align-items: center;&#13;&#10;  gap: 0.5rem;&#13;&#10;}&#13;&#10;&#13;&#10;.userName {&#13;&#10;  font-weight: 600;&#13;&#10;  color: #111827;&#13;&#10;}&#13;&#10;&#13;&#10;.cardMeta {&#13;&#10;  display: flex;&#13;&#10;  flex-direction: column;&#13;&#10;  align-items: flex-end;&#13;&#10;  gap: 0.5rem;&#13;&#10;}&#13;&#10;&#13;&#10;.rating {&#13;&#10;  display: flex;&#13;&#10;  gap: 0.25rem;&#13;&#10;}&#13;&#10;&#13;&#10;.star {&#13;&#10;  color: #d1d5db;&#13;&#10;}&#13;&#10;&#13;&#10;.star.filled {&#13;&#10;  color: #fbbf24;&#13;&#10;}&#13;&#10;&#13;&#10;.date {&#13;&#10;  display: flex;&#13;&#10;  align-items: center;&#13;&#10;  gap: 0.25rem;&#13;&#10;  font-size: 0.75rem;&#13;&#10;  color: #6b7280;&#13;&#10;}&#13;&#10;&#13;&#10;.category {&#13;&#10;  background: #f3e8ff;&#13;&#10;  color: #9333ea;&#13;&#10;  padding: 0.25rem 0.75rem;&#13;&#10;  border-radius: 9999px;&#13;&#10;  font-size: 0.75rem;&#13;&#10;  font-weight: 500;&#13;&#10;  margin-bottom: 1rem;&#13;&#10;  width: fit-content;&#13;&#10;}&#13;&#10;&#13;&#10;.feedbackText {&#13;&#10;  color: #374151;&#13;&#10;  line-height: 1.6;&#13;&#10;  margin-bottom: 1rem;&#13;&#10;}&#13;&#10;&#13;&#10;.cardFooter {&#13;&#10;  display: flex;&#13;&#10;  justify-content: space-between;&#13;&#10;  align-items: center;&#13;&#10;}&#13;&#10;&#13;&#10;.status {&#13;&#10;  display: flex;&#13;&#10;  align-items: center;&#13;&#10;}&#13;&#10;&#13;&#10;.statusBadge {&#13;&#10;  display: flex;&#13;&#10;  align-items: center;&#13;&#10;  gap: 0.25rem;&#13;&#10;  padding: 0.25rem 0.75rem;&#13;&#10;  border-radius: 9999px;&#13;&#10;  font-size: 0.75rem;&#13;&#10;  font-weight: 500;&#13;&#10;}&#13;&#10;&#13;&#10;.statusBadge.private {&#13;&#10;  background: #f3f4f6;&#13;&#10;  color: #6b7280;&#13;&#10;}&#13;&#10;&#13;&#10;.statusBadge.approved {&#13;&#10;  background: #d1fae5;&#13;&#10;  color: #065f46;&#13;&#10;}&#13;&#10;&#13;&#10;.statusBadge.pending {&#13;&#10;  background: #fef3c7;&#13;&#10;  color: #92400e;&#13;&#10;}&#13;&#10;&#13;&#10;.actions {&#13;&#10;  display: flex;&#13;&#10;  gap: 0.5rem;&#13;&#10;}&#13;&#10;&#13;&#10;.approveBtn, .rejectBtn, .unapproveBtn {&#13;&#10;  display: flex;&#13;&#10;  align-items: center;&#13;&#10;  gap: 0.25rem;&#13;&#10;  padding: 0.375rem 0.75rem;&#13;&#10;  border: none;&#13;&#10;  border-radius: 0.375rem;&#13;&#10;  font-size: 0.75rem;&#13;&#10;  font-weight: 500;&#13;&#10;  cursor: pointer;&#13;&#10;  transition: all 0.2s ease;&#13;&#10;}&#13;&#10;&#13;&#10;.approveBtn {&#13;&#10;  background: #d1fae5;&#13;&#10;  color: #065f46;&#13;&#10;}&#13;&#10;&#13;&#10;.approveBtn:hover {&#13;&#10;  background: #a7f3d0;&#13;&#10;}&#13;&#10;&#13;&#10;.rejectBtn, .unapproveBtn {&#13;&#10;  background: #fee2e2;&#13;&#10;  color: #dc2626;&#13;&#10;}&#13;&#10;&#13;&#10;.rejectBtn:hover, .unapproveBtn:hover {&#13;&#10;  background: #fecaca;&#13;&#10;}&#13;&#10;&#13;&#10;.noFeedback {&#13;&#10;  text-align: center;&#13;&#10;  padding: 3rem;&#13;&#10;  color: #6b7280;&#13;&#10;  font-style: italic;&#13;&#10;}&#13;&#10;&#13;&#10;.loading {&#13;&#10;  display: flex;&#13;&#10;  flex-direction: column;&#13;&#10;  align-items: center;&#13;&#10;  justify-content: center;&#13;&#10;  min-height: 100vh;&#13;&#10;  gap: 1rem;&#13;&#10;}&#13;&#10;&#13;&#10;/* Loading container styles */&#13;&#10;.loadingContainer {&#13;&#10;  display: flex;&#13;&#10;  flex-direction: column;&#13;&#10;  align-items: center;&#13;&#10;  justify-content: center;&#13;&#10;  padding: 3rem 2rem;&#13;&#10;  background: white;&#13;&#10;  border-radius: 1rem;&#13;&#10;  box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);&#13;&#10;  grid-column: 1 / -1; /* Span full width in grid */&#13;&#10;}&#13;&#10;&#13;&#10;.loadingContainer p {&#13;&#10;  margin: 0;&#13;&#10;  font-size: 0.875rem;&#13;&#10;  color: #6b7280;&#13;&#10;}&#13;&#10;&#13;&#10;.spinner {&#13;&#10;  width: 40px;&#13;&#10;  height: 40px;&#13;&#10;  border: 4px solid #f3f4f6;&#13;&#10;  border-top: 4px solid #9333ea;&#13;&#10;  border-radius: 50%;&#13;&#10;  animation: spin 1s linear infinite;&#13;&#10;}&#13;&#10;&#13;&#10;@keyframes spin {&#13;&#10;  0% { transform: rotate(0deg); }&#13;&#10;  100% { transform: rotate(360deg); }&#13;&#10;}&#13;&#10;&#13;&#10;/* Responsive Design */&#13;&#10;@media (max-width: 1200px) {&#13;&#10;  .statsGrid {&#13;&#10;    grid-template-columns: repeat(2, 1fr);&#13;&#10;  }&#13;&#10;&#13;&#10;  .feedbackGrid {&#13;&#10;    grid-template-columns: repeat(auto-fill, minmax(350px, 1fr));&#13;&#10;  }&#13;&#10;}&#13;&#10;&#13;&#10;@media (max-width: 768px) {&#13;&#10;  .sidebar {&#13;&#10;    width: 240px;&#13;&#10;    padding: 1rem;&#13;&#10;    transform: translateX(-100%);&#13;&#10;  }&#13;&#10;&#13;&#10;  .main {&#13;&#10;    margin-left: 0;&#13;&#10;    padding: 1rem;&#13;&#10;  }&#13;&#10;&#13;&#10;  .header {&#13;&#10;    flex-direction: column;&#13;&#10;    align-items: flex-start;&#13;&#10;    gap: 1rem;&#13;&#10;  }&#13;&#10;&#13;&#10;  .statsGrid {&#13;&#10;    grid-template-columns: 1fr;&#13;&#10;  }&#13;&#10;&#13;&#10;  .feedbackGrid {&#13;&#10;    grid-template-columns: 1fr;&#13;&#10;  }&#13;&#10;&#13;&#10;  .cardHeader {&#13;&#10;    flex-direction: column;&#13;&#10;    align-items: flex-start;&#13;&#10;    gap: 0.5rem;&#13;&#10;  }&#13;&#10;&#13;&#10;  .cardMeta {&#13;&#10;    align-items: flex-start;&#13;&#10;  }&#13;&#10;}&#13;&#10;&#13;&#10;@media (max-width: 480px) {&#13;&#10;  .feedbackCard {&#13;&#10;    padding: 1rem;&#13;&#10;  }&#13;&#10;&#13;&#10;  .cardFooter {&#13;&#10;    flex-direction: column;&#13;&#10;    align-items: flex-start;&#13;&#10;    gap: 0.75rem;&#13;&#10;  }&#13;&#10;}&#13;&#10;&#13;&#10;.hidden {&#13;&#10;  display: none !important;&#13;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/admin/feedback/page.tsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/admin/feedback/page.tsx" />
              <option name="originalContent" value="'use client'&#10;&#10;import { useState, useEffect } from 'react'&#10;import { useRouter } from 'next/navigation'&#10;import Link from 'next/link'&#10;import {&#10;  LayoutDashboard,&#10;  Users,&#10;  MessageSquare,&#10;  Calendar,&#10;  FileText,&#10;  Settings,&#10;  LogOut,&#10;  Check,&#10;  X,&#10;  Eye,&#10;  Star,&#10;  User&#10;} from 'lucide-react'&#10;import styles from './feedback.module.css'&#10;import { getApiUrl, API_CONFIG } from '@/config/api';&#10;import Loading from &quot;../../components/Loading/Loading&quot;;&#10;&#10;interface FeedbackItem {&#10;  _id: string&#10;  userName: string&#10;  userEmail: string&#10;  rating: number&#10;  feedback: string&#10;  category: string&#10;  isPublic: boolean&#10;  isApproved: boolean&#10;  createdAt: string&#10;}&#10;&#10;export default function AdminFeedbackPage() {&#10;  const [user, setUser] = useState&lt;any&gt;(null)&#10;  const [feedbacks, setFeedbacks] = useState&lt;FeedbackItem[]&gt;([])&#10;  const [loading, setLoading] = useState(true)&#10;  const [error, setError] = useState&lt;string | null&gt;(null)&#10;  const [success, setSuccess] = useState&lt;string | null&gt;(null)&#10;  const router = useRouter()&#10;&#10;  const categories = [&#10;    { value: 'general', label: 'General Feedback' },&#10;    { value: 'accuracy', label: 'Accuracy' },&#10;    { value: 'user_experience', label: 'User Experience' },&#10;    { value: 'support', label: 'Support' },&#10;    { value: 'feature_request', label: 'Feature Request' }&#10;  ]&#10;&#10;  useEffect(() =&gt; {&#10;    checkAuth()&#10;    fetchAllFeedback()&#10;  }, [])&#10;&#10;  const checkAuth = async () =&gt; {&#10;    try {&#10;      const token = localStorage.getItem('adminToken')&#10;      if (!token) {&#10;        router.push('/admin/auth')&#10;        return&#10;      }&#10;&#10;      // For admin pages, we can directly check the stored admin info&#10;      const adminInfo = localStorage.getItem('adminInfo')&#10;      if (adminInfo) {&#10;        const admin = JSON.parse(adminInfo)&#10;        if (admin.role === 'admin') {&#10;          setUser(admin)&#10;        } else {&#10;          router.push('/admin/auth')&#10;          return&#10;        }&#10;      } else {&#10;        router.push('/admin/auth')&#10;        return&#10;      }&#10;    } catch (error) {&#10;      console.error('Auth check failed:', error)&#10;      router.push('/admin/auth')&#10;    } finally {&#10;      setLoading(false)&#10;    }&#10;  }&#10;&#10;  const fetchAllFeedback = async () =&gt; {&#10;    try {&#10;      const token = localStorage.getItem('adminToken')&#10;      const response = await fetch(getApiUrl(API_CONFIG.ENDPOINTS.FEEDBACK.ADMIN_ALL), {&#10;        headers: {&#10;          'Authorization': `Bearer ${token}`&#10;        }&#10;      })&#10;&#10;      if (response.ok) {&#10;        const data = await response.json()&#10;        setFeedbacks(data.data)&#10;        setError(null)&#10;      } else {&#10;        const errorData = await response.json()&#10;        setError(errorData.message || 'Failed to fetch feedback')&#10;      }&#10;    } catch (error) {&#10;      console.error('Error fetching feedback:', error)&#10;      setError('Network error. Please check your connection.')&#10;    }&#10;  }&#10;&#10;  const handleApproval = async (feedbackId: string, isApproved: boolean) =&gt; {&#10;    try {&#10;      const token = localStorage.getItem('adminToken')&#10;      const response = await fetch(getApiUrl(`${API_CONFIG.ENDPOINTS.FEEDBACK.ADMIN_APPROVE}/${feedbackId}/approve`), {&#10;        method: 'PATCH',&#10;        headers: {&#10;          'Content-Type': 'application/json',&#10;          'Authorization': `Bearer ${token}`&#10;        },&#10;        body: JSON.stringify({ isApproved })&#10;      })&#10;&#10;      if (response.ok) {&#10;        setSuccess(`Feedback ${isApproved ? 'approved' : 'rejected'} successfully!`)&#10;        await fetchAllFeedback()&#10;        setTimeout(() =&gt; setSuccess(null), 3000)&#10;      } else {&#10;        const errorData = await response.json()&#10;        setError(errorData.message || 'Failed to update feedback')&#10;      }&#10;    } catch (error) {&#10;      console.error('Error updating feedback:', error)&#10;      setError('Network error. Please try again.')&#10;    }&#10;  }&#10;&#10;  const handleLogout = () =&gt; {&#10;    localStorage.removeItem('adminToken')&#10;    localStorage.removeItem('adminInfo')&#10;    router.push('/admin/auth')&#10;  }&#10;&#10;  const renderStars = (rating: number) =&gt; {&#10;    return (&#10;      &lt;div className={styles.rating}&gt;&#10;        {[1, 2, 3, 4, 5].map((star) =&gt; (&#10;          &lt;Star&#10;            key={star}&#10;            size={16}&#10;            className={`${styles.star} ${star &lt;= rating ? styles.filled : ''}`}&#10;          /&gt;&#10;        ))}&#10;      &lt;/div&gt;&#10;    )&#10;  }&#10;&#10;  const getStatusColor = (isPublic: boolean, isApproved: boolean) =&gt; {&#10;    if (!isPublic) return styles.private&#10;    return isApproved ? styles.approved : styles.pending&#10;  }&#10;&#10;  const getStatusText = (isPublic: boolean, isApproved: boolean) =&gt; {&#10;    if (!isPublic) return 'Private'&#10;    return isApproved ? 'Approved' : 'Pending'&#10;  }&#10;&#10;  if (loading) {&#10;    return &lt;Loading /&gt;&#10;  }&#10;&#10;  return (&#10;    &lt;div className={styles.container}&gt;&#10;      {/* Sidebar */}&#10;      &lt;aside className={styles.sidebar}&gt;&#10;        &lt;div className={styles.logo}&gt;&#10;          &lt;LayoutDashboard size={24} /&gt;&#10;          &lt;span&gt;Admin Panel&lt;/span&gt;&#10;        &lt;/div&gt;&#10;&#10;        &lt;nav className={styles.navigation}&gt;&#10;          &lt;Link href=&quot;/admin/dashboard&quot; className={styles.navItem}&gt;&#10;            &lt;LayoutDashboard size={20} /&gt;&#10;            Dashboard&#10;          &lt;/Link&gt;&#10;          &lt;Link href=&quot;/admin/users&quot; className={styles.navItem}&gt;&#10;            &lt;Users size={20} /&gt;&#10;            Users&#10;          &lt;/Link&gt;&#10;          &lt;Link href=&quot;/admin/doctors&quot; className={styles.navItem}&gt;&#10;            &lt;Users size={20} /&gt;&#10;            Doctors&#10;          &lt;/Link&gt;&#10;          &lt;Link href=&quot;/admin/appointments&quot; className={styles.navItem}&gt;&#10;            &lt;Calendar size={20} /&gt;&#10;            Appointments&#10;          &lt;/Link&gt;&#10;          &lt;Link href=&quot;/admin/feedback&quot; className={`${styles.navItem} ${styles.active}`}&gt;&#10;            &lt;MessageSquare size={20} /&gt;&#10;            Feedback&#10;          &lt;/Link&gt;&#10;          &lt;Link href=&quot;/admin/reports&quot; className={styles.navItem}&gt;&#10;            &lt;FileText size={20} /&gt;&#10;            Reports&#10;          &lt;/Link&gt;&#10;          &lt;Link href=&quot;/admin/settings&quot; className={styles.navItem}&gt;&#10;            &lt;Settings size={20} /&gt;&#10;            Settings&#10;          &lt;/Link&gt;&#10;        &lt;/nav&gt;&#10;&#10;        &lt;div className={styles.sidebarFooter}&gt;&#10;          &lt;button onClick={handleLogout} className={styles.logoutBtn}&gt;&#10;            &lt;LogOut size={20} /&gt;&#10;            Logout&#10;          &lt;/button&gt;&#10;        &lt;/div&gt;&#10;      &lt;/aside&gt;&#10;&#10;      {/* Main Content */}&#10;      &lt;main className={styles.main}&gt;&#10;        &lt;header className={styles.header}&gt;&#10;          &lt;div className={styles.headerLeft}&gt;&#10;            &lt;h1&gt;Feedback Management&lt;/h1&gt;&#10;            &lt;p&gt;Review and approve user feedback for public testimonials&lt;/p&gt;&#10;          &lt;/div&gt;&#10;          &lt;div className={styles.headerRight}&gt;&#10;            &lt;div className={styles.adminProfile}&gt;&#10;              {user?.profile_pic ? (&#10;                &lt;img&#10;                  src={user.profile_pic}&#10;                  alt={user.name}&#10;                  className={styles.avatar}&#10;                  onError={(e) =&gt; {&#10;                    const target = e.target as HTMLImageElement;&#10;                    target.style.display = 'none';&#10;                    target.nextElementSibling?.classList.remove(styles.hidden);&#10;                  }}&#10;                /&gt;&#10;              ) : null}&#10;              &lt;div className={`${styles.avatar} ${user?.profile_pic ? styles.hidden : ''}`}&gt;&#10;                {user?.name?.charAt(0).toUpperCase()}&#10;              &lt;/div&gt;&#10;              &lt;span&gt;{user?.name}&lt;/span&gt;&#10;            &lt;/div&gt;&#10;          &lt;/div&gt;&#10;        &lt;/header&gt;&#10;&#10;        {error &amp;&amp; &lt;div className={styles.error}&gt;{error}&lt;/div&gt;}&#10;        {success &amp;&amp; &lt;div className={styles.success}&gt;{success}&lt;/div&gt;}&#10;&#10;        {/* Stats */}&#10;        &lt;div className={styles.statsGrid}&gt;&#10;          &lt;div className={styles.statCard}&gt;&#10;            &lt;div className={styles.statIcon}&gt;&#10;              &lt;MessageSquare size={24} /&gt;&#10;            &lt;/div&gt;&#10;            &lt;div className={styles.statContent}&gt;&#10;              &lt;h3&gt;{feedbacks.length}&lt;/h3&gt;&#10;              &lt;p&gt;Total Feedback&lt;/p&gt;&#10;            &lt;/div&gt;&#10;          &lt;/div&gt;&#10;&#10;          &lt;div className={styles.statCard}&gt;&#10;            &lt;div className={styles.statIcon}&gt;&#10;              &lt;Eye size={24} /&gt;&#10;            &lt;/div&gt;&#10;            &lt;div className={styles.statContent}&gt;&#10;              &lt;h3&gt;{feedbacks.filter(f =&gt; f.isPublic &amp;&amp; !f.isApproved).length}&lt;/h3&gt;&#10;              &lt;p&gt;Pending Approval&lt;/p&gt;&#10;            &lt;/div&gt;&#10;          &lt;/div&gt;&#10;&#10;          &lt;div className={styles.statCard}&gt;&#10;            &lt;div className={styles.statIcon}&gt;&#10;              &lt;Check size={24} /&gt;&#10;            &lt;/div&gt;&#10;            &lt;div className={styles.statContent}&gt;&#10;              &lt;h3&gt;{feedbacks.filter(f =&gt; f.isApproved).length}&lt;/h3&gt;&#10;              &lt;p&gt;Approved&lt;/p&gt;&#10;            &lt;/div&gt;&#10;          &lt;/div&gt;&#10;        &lt;/div&gt;&#10;&#10;        {/* Feedback Grid */}&#10;        &lt;div className={styles.feedbackGrid}&gt;&#10;          {feedbacks.map((feedback) =&gt; (&#10;            &lt;div key={feedback._id} className={styles.feedbackCard}&gt;&#10;              &lt;div className={styles.cardHeader}&gt;&#10;                &lt;div className={styles.userInfo}&gt;&#10;                  &lt;User size={16} /&gt;&#10;                  &lt;span className={styles.userName}&gt;{feedback.userName}&lt;/span&gt;&#10;                &lt;/div&gt;&#10;                &lt;div className={styles.cardMeta}&gt;&#10;                  {renderStars(feedback.rating)}&#10;                  &lt;span className={styles.date}&gt;&#10;                    &lt;Calendar size={14} /&gt;&#10;                    {new Date(feedback.createdAt).toLocaleDateString()}&#10;                  &lt;/span&gt;&#10;                &lt;/div&gt;&#10;              &lt;/div&gt;&#10;&#10;              &lt;div className={styles.category}&gt;&#10;                {categories.find(c =&gt; c.value === feedback.category)?.label}&#10;              &lt;/div&gt;&#10;&#10;              &lt;p className={styles.feedbackText}&gt;{feedback.feedback}&lt;/p&gt;&#10;&#10;              &lt;div className={styles.cardFooter}&gt;&#10;                &lt;div className={styles.status}&gt;&#10;                  &lt;span className={`${styles.statusBadge} ${getStatusColor(feedback.isPublic, feedback.isApproved)}`}&gt;&#10;                    &lt;Eye size={12} /&gt;&#10;                    {getStatusText(feedback.isPublic, feedback.isApproved)}&#10;                  &lt;/span&gt;&#10;                &lt;/div&gt;&#10;&#10;                {feedback.isPublic &amp;&amp; (&#10;                  &lt;div className={styles.actions}&gt;&#10;                    {!feedback.isApproved ? (&#10;                      &lt;&gt;&#10;                        &lt;button&#10;                          onClick={() =&gt; handleApproval(feedback._id, true)}&#10;                          className={styles.approveBtn}&#10;                          title=&quot;Approve feedback&quot;&#10;                        &gt;&#10;                          &lt;Check size={16} /&gt;&#10;                          Approve&#10;                        &lt;/button&gt;&#10;                        &lt;button&#10;                          onClick={() =&gt; handleApproval(feedback._id, false)}&#10;                          className={styles.rejectBtn}&#10;                          title=&quot;Reject feedback&quot;&#10;                        &gt;&#10;                          &lt;X size={16} /&gt;&#10;                          Reject&#10;                        &lt;/button&gt;&#10;                      &lt;/&gt;&#10;                    ) : (&#10;                      &lt;button&#10;                        onClick={() =&gt; handleApproval(feedback._id, false)}&#10;                        className={styles.unapproveBtn}&#10;                        title=&quot;Remove approval&quot;&#10;                      &gt;&#10;                        &lt;X size={16} /&gt;&#10;                        Unapprove&#10;                      &lt;/button&gt;&#10;                    )}&#10;                  &lt;/div&gt;&#10;                )}&#10;              &lt;/div&gt;&#10;            &lt;/div&gt;&#10;          ))}&#10;        &lt;/div&gt;&#10;&#10;        {feedbacks.length === 0 &amp;&amp; (&#10;          &lt;div className={styles.noFeedback}&gt;&#10;            &lt;p&gt;No feedback submissions yet.&lt;/p&gt;&#10;          &lt;/div&gt;&#10;        )}&#10;      &lt;/main&gt;&#10;    &lt;/div&gt;&#10;  )&#10;}&#10;" />
              <option name="updatedContent" value="'use client'&#13;&#10;&#13;&#10;import { useState, useEffect } from 'react'&#13;&#10;import { useRouter } from 'next/navigation'&#13;&#10;import Link from 'next/link'&#13;&#10;import {&#13;&#10;  LayoutDashboard,&#13;&#10;  Users,&#13;&#10;  MessageSquare,&#13;&#10;  Calendar,&#13;&#10;  FileText,&#13;&#10;  Settings,&#13;&#10;  LogOut,&#13;&#10;  Check,&#13;&#10;  X,&#13;&#10;  Eye,&#13;&#10;  Star,&#13;&#10;  User&#13;&#10;} from 'lucide-react'&#13;&#10;import styles from './feedback.module.css'&#13;&#10;import { getApiUrl, API_CONFIG } from '@/config/api';&#13;&#10;import Loading from &quot;../../components/Loading/Loading&quot;;&#13;&#10;&#13;&#10;interface FeedbackItem {&#13;&#10;  _id: string&#13;&#10;  userName: string&#13;&#10;  userEmail: string&#13;&#10;  rating: number&#13;&#10;  feedback: string&#13;&#10;  category: string&#13;&#10;  isPublic: boolean&#13;&#10;  isApproved: boolean&#13;&#10;  createdAt: string&#13;&#10;}&#13;&#10;&#13;&#10;export default function AdminFeedbackPage() {&#13;&#10;  const [user, setUser] = useState&lt;any&gt;(null)&#13;&#10;  const [feedbacks, setFeedbacks] = useState&lt;FeedbackItem[]&gt;([])&#13;&#10;  const [loading, setLoading] = useState(true)&#13;&#10;  const [feedbackLoading, setFeedbackLoading] = useState(true)&#13;&#10;  const [error, setError] = useState&lt;string | null&gt;(null)&#13;&#10;  const [success, setSuccess] = useState&lt;string | null&gt;(null)&#13;&#10;  const router = useRouter()&#13;&#10;&#13;&#10;  const categories = [&#13;&#10;    { value: 'general', label: 'General Feedback' },&#13;&#10;    { value: 'accuracy', label: 'Accuracy' },&#13;&#10;    { value: 'user_experience', label: 'User Experience' },&#13;&#10;    { value: 'support', label: 'Support' },&#13;&#10;    { value: 'feature_request', label: 'Feature Request' }&#13;&#10;  ]&#13;&#10;&#13;&#10;  useEffect(() =&gt; {&#13;&#10;    checkAuth()&#13;&#10;    fetchAllFeedback()&#13;&#10;  }, [])&#13;&#10;&#13;&#10;  const checkAuth = async () =&gt; {&#13;&#10;    try {&#13;&#10;      const token = localStorage.getItem('adminToken')&#13;&#10;      if (!token) {&#13;&#10;        router.push('/admin/auth')&#13;&#10;        return&#13;&#10;      }&#13;&#10;&#13;&#10;      // For admin pages, we can directly check the stored admin info&#13;&#10;      const adminInfo = localStorage.getItem('adminInfo')&#13;&#10;      if (adminInfo) {&#13;&#10;        const admin = JSON.parse(adminInfo)&#13;&#10;        if (admin.role === 'admin') {&#13;&#10;          setUser(admin)&#13;&#10;        } else {&#13;&#10;          router.push('/admin/auth')&#13;&#10;          return&#13;&#10;        }&#13;&#10;      } else {&#13;&#10;        router.push('/admin/auth')&#13;&#10;        return&#13;&#10;      }&#13;&#10;    } catch (error) {&#13;&#10;      console.error('Auth check failed:', error)&#13;&#10;      router.push('/admin/auth')&#13;&#10;    } finally {&#13;&#10;      setLoading(false)&#13;&#10;    }&#13;&#10;  }&#13;&#10;&#13;&#10;  const fetchAllFeedback = async () =&gt; {&#13;&#10;    setFeedbackLoading(true)&#13;&#10;    try {&#13;&#10;      const token = localStorage.getItem('adminToken')&#13;&#10;      const response = await fetch(getApiUrl(API_CONFIG.ENDPOINTS.FEEDBACK.ADMIN_ALL), {&#13;&#10;        headers: {&#13;&#10;          'Authorization': `Bearer ${token}`&#13;&#10;        }&#13;&#10;      })&#13;&#10;&#13;&#10;      if (response.ok) {&#13;&#10;        const data = await response.json()&#13;&#10;        setFeedbacks(data.data)&#13;&#10;        setError(null)&#13;&#10;      } else {&#13;&#10;        const errorData = await response.json()&#13;&#10;        setError(errorData.message || 'Failed to fetch feedback')&#13;&#10;      }&#13;&#10;    } catch (error) {&#13;&#10;      console.error('Error fetching feedback:', error)&#13;&#10;      setError('Network error. Please check your connection.')&#13;&#10;    } finally {&#13;&#10;      setFeedbackLoading(false)&#13;&#10;    }&#13;&#10;  }&#13;&#10;&#13;&#10;  const handleApproval = async (feedbackId: string, isApproved: boolean) =&gt; {&#13;&#10;    try {&#13;&#10;      const token = localStorage.getItem('adminToken')&#13;&#10;      const response = await fetch(getApiUrl(`${API_CONFIG.ENDPOINTS.FEEDBACK.ADMIN_APPROVE}/${feedbackId}/approve`), {&#13;&#10;        method: 'PATCH',&#13;&#10;        headers: {&#13;&#10;          'Content-Type': 'application/json',&#13;&#10;          'Authorization': `Bearer ${token}`&#13;&#10;        },&#13;&#10;        body: JSON.stringify({ isApproved })&#13;&#10;      })&#13;&#10;&#13;&#10;      if (response.ok) {&#13;&#10;        setSuccess(`Feedback ${isApproved ? 'approved' : 'rejected'} successfully!`)&#13;&#10;        await fetchAllFeedback()&#13;&#10;        setTimeout(() =&gt; setSuccess(null), 3000)&#13;&#10;      } else {&#13;&#10;        const errorData = await response.json()&#13;&#10;        setError(errorData.message || 'Failed to update feedback')&#13;&#10;      }&#13;&#10;    } catch (error) {&#13;&#10;      console.error('Error updating feedback:', error)&#13;&#10;      setError('Network error. Please try again.')&#13;&#10;    }&#13;&#10;  }&#13;&#10;&#13;&#10;  const handleLogout = () =&gt; {&#13;&#10;    localStorage.removeItem('adminToken')&#13;&#10;    localStorage.removeItem('adminInfo')&#13;&#10;    router.push('/admin/auth')&#13;&#10;  }&#13;&#10;&#13;&#10;  const renderStars = (rating: number) =&gt; {&#13;&#10;    return (&#13;&#10;      &lt;div className={styles.rating}&gt;&#13;&#10;        {[1, 2, 3, 4, 5].map((star) =&gt; (&#13;&#10;          &lt;Star&#13;&#10;            key={star}&#13;&#10;            size={16}&#13;&#10;            className={`${styles.star} ${star &lt;= rating ? styles.filled : ''}`}&#13;&#10;          /&gt;&#13;&#10;        ))}&#13;&#10;      &lt;/div&gt;&#13;&#10;    )&#13;&#10;  }&#13;&#10;&#13;&#10;  const getStatusColor = (isPublic: boolean, isApproved: boolean) =&gt; {&#13;&#10;    if (!isPublic) return styles.private&#13;&#10;    return isApproved ? styles.approved : styles.pending&#13;&#10;  }&#13;&#10;&#13;&#10;  const getStatusText = (isPublic: boolean, isApproved: boolean) =&gt; {&#13;&#10;    if (!isPublic) return 'Private'&#13;&#10;    return isApproved ? 'Approved' : 'Pending'&#13;&#10;  }&#13;&#10;&#13;&#10;  if (loading) {&#13;&#10;    return &lt;Loading /&gt;&#13;&#10;  }&#13;&#10;&#13;&#10;  return (&#13;&#10;    &lt;div className={styles.container}&gt;&#13;&#10;      {/* Sidebar */}&#13;&#10;      &lt;aside className={styles.sidebar}&gt;&#13;&#10;        &lt;div className={styles.logo}&gt;&#13;&#10;          &lt;LayoutDashboard size={24} /&gt;&#13;&#10;          &lt;span&gt;Admin Panel&lt;/span&gt;&#13;&#10;        &lt;/div&gt;&#13;&#10;&#13;&#10;        &lt;nav className={styles.navigation}&gt;&#13;&#10;          &lt;Link href=&quot;/admin/dashboard&quot; className={styles.navItem}&gt;&#13;&#10;            &lt;LayoutDashboard size={20} /&gt;&#13;&#10;            Dashboard&#13;&#10;          &lt;/Link&gt;&#13;&#10;          &lt;Link href=&quot;/admin/users&quot; className={styles.navItem}&gt;&#13;&#10;            &lt;Users size={20} /&gt;&#13;&#10;            Users&#13;&#10;          &lt;/Link&gt;&#13;&#10;          &lt;Link href=&quot;/admin/doctors&quot; className={styles.navItem}&gt;&#13;&#10;            &lt;Users size={20} /&gt;&#13;&#10;            Doctors&#13;&#10;          &lt;/Link&gt;&#13;&#10;          &lt;Link href=&quot;/admin/appointments&quot; className={styles.navItem}&gt;&#13;&#10;            &lt;Calendar size={20} /&gt;&#13;&#10;            Appointments&#13;&#10;          &lt;/Link&gt;&#13;&#10;          &lt;Link href=&quot;/admin/feedback&quot; className={`${styles.navItem} ${styles.active}`}&gt;&#13;&#10;            &lt;MessageSquare size={20} /&gt;&#13;&#10;            Feedback&#13;&#10;          &lt;/Link&gt;&#13;&#10;          &lt;Link href=&quot;/admin/reports&quot; className={styles.navItem}&gt;&#13;&#10;            &lt;FileText size={20} /&gt;&#13;&#10;            Reports&#13;&#10;          &lt;/Link&gt;&#13;&#10;          &lt;Link href=&quot;/admin/settings&quot; className={styles.navItem}&gt;&#13;&#10;            &lt;Settings size={20} /&gt;&#13;&#10;            Settings&#13;&#10;          &lt;/Link&gt;&#13;&#10;        &lt;/nav&gt;&#13;&#10;&#13;&#10;        &lt;div className={styles.sidebarFooter}&gt;&#13;&#10;          &lt;button onClick={handleLogout} className={styles.logoutBtn}&gt;&#13;&#10;            &lt;LogOut size={20} /&gt;&#13;&#10;            Logout&#13;&#10;          &lt;/button&gt;&#13;&#10;        &lt;/div&gt;&#13;&#10;      &lt;/aside&gt;&#13;&#10;&#13;&#10;      {/* Main Content */}&#13;&#10;      &lt;main className={styles.main}&gt;&#13;&#10;        &lt;header className={styles.header}&gt;&#13;&#10;          &lt;div className={styles.headerLeft}&gt;&#13;&#10;            &lt;h1&gt;Feedback Management&lt;/h1&gt;&#13;&#10;            &lt;p&gt;Review and approve user feedback for public testimonials&lt;/p&gt;&#13;&#10;          &lt;/div&gt;&#13;&#10;          &lt;div className={styles.headerRight}&gt;&#13;&#10;            &lt;div className={styles.adminProfile}&gt;&#13;&#10;              {user?.profile_pic ? (&#13;&#10;                &lt;img&#13;&#10;                  src={user.profile_pic}&#13;&#10;                  alt={user.name}&#13;&#10;                  className={styles.avatar}&#13;&#10;                  onError={(e) =&gt; {&#13;&#10;                    const target = e.target as HTMLImageElement;&#13;&#10;                    target.style.display = 'none';&#13;&#10;                    target.nextElementSibling?.classList.remove(styles.hidden);&#13;&#10;                  }}&#13;&#10;                /&gt;&#13;&#10;              ) : null}&#13;&#10;              &lt;div className={`${styles.avatar} ${user?.profile_pic ? styles.hidden : ''}`}&gt;&#13;&#10;                {user?.name?.charAt(0).toUpperCase()}&#13;&#10;              &lt;/div&gt;&#13;&#10;              &lt;span&gt;{user?.name}&lt;/span&gt;&#13;&#10;            &lt;/div&gt;&#13;&#10;          &lt;/div&gt;&#13;&#10;        &lt;/header&gt;&#13;&#10;&#13;&#10;        {error &amp;&amp; &lt;div className={styles.error}&gt;{error}&lt;/div&gt;}&#13;&#10;        {success &amp;&amp; &lt;div className={styles.success}&gt;{success}&lt;/div&gt;}&#13;&#10;&#13;&#10;        {/* Stats */}&#13;&#10;        &lt;div className={styles.statsGrid}&gt;&#13;&#10;          &lt;div className={styles.statCard}&gt;&#13;&#10;            &lt;div className={styles.statIcon}&gt;&#13;&#10;              &lt;MessageSquare size={24} /&gt;&#13;&#10;            &lt;/div&gt;&#13;&#10;            &lt;div className={styles.statContent}&gt;&#13;&#10;              &lt;h3&gt;{feedbacks.length}&lt;/h3&gt;&#13;&#10;              &lt;p&gt;Total Feedback&lt;/p&gt;&#13;&#10;            &lt;/div&gt;&#13;&#10;          &lt;/div&gt;&#13;&#10;&#13;&#10;          &lt;div className={styles.statCard}&gt;&#13;&#10;            &lt;div className={styles.statIcon}&gt;&#13;&#10;              &lt;Eye size={24} /&gt;&#13;&#10;            &lt;/div&gt;&#13;&#10;            &lt;div className={styles.statContent}&gt;&#13;&#10;              &lt;h3&gt;{feedbacks.filter(f =&gt; f.isPublic &amp;&amp; !f.isApproved).length}&lt;/h3&gt;&#13;&#10;              &lt;p&gt;Pending Approval&lt;/p&gt;&#13;&#10;            &lt;/div&gt;&#13;&#10;          &lt;/div&gt;&#13;&#10;&#13;&#10;          &lt;div className={styles.statCard}&gt;&#13;&#10;            &lt;div className={styles.statIcon}&gt;&#13;&#10;              &lt;Check size={24} /&gt;&#13;&#10;            &lt;/div&gt;&#13;&#10;            &lt;div className={styles.statContent}&gt;&#13;&#10;              &lt;h3&gt;{feedbacks.filter(f =&gt; f.isApproved).length}&lt;/h3&gt;&#13;&#10;              &lt;p&gt;Approved&lt;/p&gt;&#13;&#10;            &lt;/div&gt;&#13;&#10;          &lt;/div&gt;&#13;&#10;        &lt;/div&gt;&#13;&#10;&#13;&#10;        {/* Feedback Grid */}&#13;&#10;        &lt;div className={styles.feedbackGrid}&gt;&#13;&#10;          {feedbackLoading ? (&#13;&#10;            &lt;div className={styles.loadingContainer}&gt;&#13;&#10;              &lt;Loading /&gt;&#13;&#10;              &lt;p style={{ textAlign: 'center', marginTop: '1rem', color: '#6b7280' }}&gt;&#13;&#10;                Loading feedback submissions...&#13;&#10;              &lt;/p&gt;&#13;&#10;            &lt;/div&gt;&#13;&#10;          ) : feedbacks.length &gt; 0 ? (&#13;&#10;            feedbacks.map((feedback) =&gt; (&#13;&#10;              &lt;div key={feedback._id} className={styles.feedbackCard}&gt;&#13;&#10;                &lt;div className={styles.cardHeader}&gt;&#13;&#10;                  &lt;div className={styles.userInfo}&gt;&#13;&#10;                    &lt;User size={16} /&gt;&#13;&#10;                    &lt;span className={styles.userName}&gt;{feedback.userName}&lt;/span&gt;&#13;&#10;                  &lt;/div&gt;&#13;&#10;                  &lt;div className={styles.cardMeta}&gt;&#13;&#10;                    {renderStars(feedback.rating)}&#13;&#10;                    &lt;span className={styles.date}&gt;&#13;&#10;                      &lt;Calendar size={14} /&gt;&#13;&#10;                      {new Date(feedback.createdAt).toLocaleDateString()}&#13;&#10;                    &lt;/span&gt;&#13;&#10;                  &lt;/div&gt;&#13;&#10;                &lt;/div&gt;&#13;&#10;&#13;&#10;                &lt;div className={styles.category}&gt;&#13;&#10;                  {categories.find(c =&gt; c.value === feedback.category)?.label}&#13;&#10;                &lt;/div&gt;&#13;&#10;&#13;&#10;                &lt;p className={styles.feedbackText}&gt;{feedback.feedback}&lt;/p&gt;&#13;&#10;&#13;&#10;                &lt;div className={styles.cardFooter}&gt;&#13;&#10;                  &lt;div className={styles.status}&gt;&#13;&#10;                    &lt;span className={`${styles.statusBadge} ${getStatusColor(feedback.isPublic, feedback.isApproved)}`}&gt;&#13;&#10;                      &lt;Eye size={12} /&gt;&#13;&#10;                      {getStatusText(feedback.isPublic, feedback.isApproved)}&#13;&#10;                    &lt;/span&gt;&#13;&#10;                  &lt;/div&gt;&#13;&#10;&#13;&#10;                  {feedback.isPublic &amp;&amp; (&#13;&#10;                    &lt;div className={styles.actions}&gt;&#13;&#10;                      {!feedback.isApproved ? (&#13;&#10;                        &lt;&gt;&#13;&#10;                          &lt;button&#13;&#10;                            onClick={() =&gt; handleApproval(feedback._id, true)}&#13;&#10;                            className={styles.approveBtn}&#13;&#10;                            title=&quot;Approve feedback&quot;&#13;&#10;                          &gt;&#13;&#10;                            &lt;Check size={16} /&gt;&#13;&#10;                            Approve&#13;&#10;                          &lt;/button&gt;&#13;&#10;                          &lt;button&#13;&#10;                            onClick={() =&gt; handleApproval(feedback._id, false)}&#13;&#10;                            className={styles.rejectBtn}&#13;&#10;                            title=&quot;Reject feedback&quot;&#13;&#10;                          &gt;&#13;&#10;                            &lt;X size={16} /&gt;&#13;&#10;                            Reject&#13;&#10;                          &lt;/button&gt;&#13;&#10;                        &lt;/&gt;&#13;&#10;                      ) : (&#13;&#10;                        &lt;button&#13;&#10;                          onClick={() =&gt; handleApproval(feedback._id, false)}&#13;&#10;                          className={styles.unapproveBtn}&#13;&#10;                          title=&quot;Remove approval&quot;&#13;&#10;                        &gt;&#13;&#10;                          &lt;X size={16} /&gt;&#13;&#10;                          Unapprove&#13;&#10;                        &lt;/button&gt;&#13;&#10;                      )}&#13;&#10;                    &lt;/div&gt;&#13;&#10;                  )}&#13;&#10;                &lt;/div&gt;&#13;&#10;              &lt;/div&gt;&#13;&#10;            ))&#13;&#10;          ) : (&#13;&#10;            &lt;div className={styles.noFeedback}&gt;&#13;&#10;              &lt;p&gt;No feedback submissions yet.&lt;/p&gt;&#13;&#10;            &lt;/div&gt;&#13;&#10;          )}&#13;&#10;        &lt;/div&gt;&#13;&#10;      &lt;/main&gt;&#13;&#10;    &lt;/div&gt;&#13;&#10;  )&#13;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/doctors/[id]/book/page.tsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/doctors/[id]/book/page.tsx" />
              <option name="originalContent" value="&quot;use client&quot;&#10;&#10;import { useState, useEffect } from &quot;react&quot;&#10;import { useRouter, useParams } from &quot;next/navigation&quot;&#10;import { Calendar as CalendarIcon, Clock, ArrowLeft } from &quot;lucide-react&quot;&#10;import Link from &quot;next/link&quot;&#10;import axios from &quot;axios&quot;&#10;import styles from &quot;./book.module.css&quot;&#10;import { getApiUrl, API_CONFIG } from '@/config/api';&#10;import Toast from &quot;../../../components/Toast/Toast&quot;;&#10;&#10;interface Doctor {&#10;  _id: string&#10;  name: string&#10;  speciality: string&#10;  hospital_name: string&#10;  image_source: string&#10;  visiting_hours: string&#10;  degree: string&#10;  address: string&#10;  number: string&#10;  About: string&#10;  latitude: string&#10;  longitude: string&#10;}&#10;&#10;interface TimeSlot {&#10;  time: string&#10;  available: boolean&#10;}&#10;&#10;interface User {&#10;  _id: string&#10;  name: string&#10;  email: string&#10;  bio: string&#10;  gender: string&#10;  age: number | null&#10;  phone: string&#10;  address: string&#10;  zip_code: string&#10;  country: string&#10;  state: string&#10;  city: string&#10;  profile_pic: string&#10;  role: string&#10;  status: string&#10;  blood_group: string&#10;  weight: string&#10;  height: string&#10;  allergies: string&#10;  medical_conditions: string&#10;  medications: string&#10;  surgeries: string&#10;  family_medical_history: string&#10;  emergency_contact: string&#10;  date: string&#10;  __v: number&#10;}&#10;&#10;export default function BookAppointmentPage() {&#10;  const router = useRouter()&#10;  const params = useParams()&#10;  const doctorId = params.id as string&#10;  console.log(doctorId)&#10;&#10;  const [doctor, setDoctor] = useState&lt;Doctor | null&gt;(null)&#10;  const [user, setUser] = useState&lt;User | null&gt;(null)&#10;  const [loggedIn, setLoggedIn] = useState(false)&#10;  const [loading, setLoading] = useState(true)&#10;  const [error, setError] = useState(&quot;&quot;)&#10;  const [selectedDate, setSelectedDate] = useState(&quot;&quot;)&#10;  const [selectedTime, setSelectedTime] = useState(&quot;&quot;)&#10;  const [appointmentType, setAppointmentType] = useState(&quot;consultation&quot;)&#10;  const [notes, setNotes] = useState(&quot;&quot;)&#10;  const [submitLoading, setSubmitLoading] = useState(false)&#10;  const [timeSlots, setTimeSlots] = useState&lt;TimeSlot[]&gt;([])&#10;  const [showSuccessModal, setShowSuccessModal] = useState(false)&#10;  const [bookingDetails, setBookingDetails] = useState&lt;any&gt;(null)&#10;  const [toast, setToast] = useState&lt;{&#10;    isOpen: boolean;&#10;    title: string;&#10;    message: string;&#10;    type: 'success' | 'error' | 'warning' | 'info';&#10;  }&gt;({&#10;    isOpen: false,&#10;    title: '',&#10;    message: '',&#10;    type: 'info'&#10;  })&#10;&#10;  const showToast = (title: string, message: string, type: 'success' | 'error' | 'warning' | 'info' = 'info') =&gt; {&#10;    setToast({&#10;      isOpen: true,&#10;      title,&#10;      message,&#10;      type&#10;    });&#10;  };&#10;&#10;  // Fetch user data and check authentication&#10;  useEffect(() =&gt; {&#10;    const fetchUserData = async () =&gt; {&#10;      const token = localStorage.getItem(&quot;token&quot;)&#10;      if (!token) {&#10;        setLoggedIn(false)&#10;        setLoading(false)&#10;        router.push(&quot;/auth&quot;)&#10;        return&#10;      }&#10;      try {&#10;        const response = await axios.get(getApiUrl(API_CONFIG.ENDPOINTS.AUTH.PROFILE), {&#10;          headers: { Authorization: `Bearer ${token}` },&#10;        })&#10;        setUser(response.data)&#10;        setLoggedIn(true)&#10;      } catch (err) {&#10;        console.error(&quot;Failed to fetch user data:&quot;, err)&#10;        setError(&quot;Failed to fetch user data.&quot;)&#10;        setLoggedIn(false)&#10;        router.push(&quot;/auth&quot;)&#10;      } finally {&#10;        setLoading(false)&#10;      }&#10;    }&#10;&#10;    fetchUserData()&#10;  }, [router])&#10;&#10;  // Fetch doctor data&#10;  useEffect(() =&gt; {&#10;    const fetchDoctor = async () =&gt; {&#10;      if (!doctorId) return&#10;      try {&#10;        const response = await axios.get&lt;Doctor&gt;(getApiUrl(`${API_CONFIG.ENDPOINTS.DOCTORS.DETAIL}/${doctorId}`))&#10;        setDoctor(response.data)&#10;        // Generate time slots from visiting_hours&#10;        const slots = generateTimeSlots(response.data.visiting_hours)&#10;        setTimeSlots(slots)&#10;      } catch (err) {&#10;        console.error(&quot;Failed to fetch doctor data:&quot;, err)&#10;        setError(&quot;Failed to fetch doctor data.&quot;)&#10;      }&#10;    }&#10;&#10;    fetchDoctor()&#10;  }, [doctorId])&#10;&#10;  // Function to parse visiting_hours and generate time slots&#10;  const generateTimeSlots = (visitingHours: string): TimeSlot[] =&gt; {&#10;    console.log('Generating time slots for visiting hours:', visitingHours)&#10;&#10;    // Try multiple regex patterns to handle different formats&#10;    let match = visitingHours.match(/(\d+)(?::\d+)?\s*(am|pm)\s*to\s*(\d+)(?::\d+)?\s*(am|pm)\s*\(([^)]+)\)/i)&#10;&#10;    // If first pattern doesn't match, try without parentheses (for &quot;Everyday&quot; cases)&#10;    if (!match) {&#10;      match = visitingHours.match(/(\d+)(?::\d+)?\s*(am|pm)\s*to\s*(\d+)(?::\d+)?\s*(am|pm)/i)&#10;      console.log('Trying pattern without parentheses:', match)&#10;    }&#10;&#10;    // If still no match, try with different separators&#10;    if (!match) {&#10;      match = visitingHours.match(/(\d+)(?::\d+)?\s*(am|pm)\s*[-–—]\s*(\d+)(?::\d+)?\s*(am|pm)/i)&#10;      console.log('Trying pattern with dash separator:', match)&#10;    }&#10;&#10;    if (!match) {&#10;      console.log('No matching pattern found for visiting hours:', visitingHours)&#10;      // Return default slots if we can't parse the format&#10;      return [&#10;        { time: &quot;9:00 AM&quot;, available: true },&#10;        { time: &quot;9:30 AM&quot;, available: true },&#10;        { time: &quot;10:00 AM&quot;, available: true },&#10;        { time: &quot;10:30 AM&quot;, available: true },&#10;        { time: &quot;11:00 AM&quot;, available: true },&#10;        { time: &quot;11:30 AM&quot;, available: true },&#10;        { time: &quot;2:00 PM&quot;, available: true },&#10;        { time: &quot;2:30 PM&quot;, available: true },&#10;        { time: &quot;3:00 PM&quot;, available: true },&#10;        { time: &quot;3:30 PM&quot;, available: true },&#10;        { time: &quot;4:00 PM&quot;, available: true },&#10;        { time: &quot;4:30 PM&quot;, available: true }&#10;      ]&#10;    }&#10;&#10;    const [, startHour, startPeriod, endHour, endPeriod] = match&#10;    let start = parseInt(startHour)&#10;    let end = parseInt(endHour)&#10;    &#10;    console.log('Parsed time:', { startHour, startPeriod, endHour, endPeriod })&#10;&#10;    // Convert to 24-hour format for calculation&#10;    if (startPeriod.toLowerCase() === &quot;pm&quot; &amp;&amp; start !== 12) start += 12&#10;    if (startPeriod.toLowerCase() === &quot;am&quot; &amp;&amp; start === 12) start = 0&#10;    if (endPeriod.toLowerCase() === &quot;pm&quot; &amp;&amp; end !== 12) end += 12&#10;    if (endPeriod.toLowerCase() === &quot;am&quot; &amp;&amp; end === 12) end = 0&#10;&#10;    console.log('Converted to 24-hour:', { start, end })&#10;&#10;    const slots: TimeSlot[] = []&#10;    for (let hour = start; hour &lt; end; hour++) {&#10;      // Convert back to 12-hour format for display&#10;      const displayHour = hour === 0 ? 12 : hour &gt; 12 ? hour - 12 : hour&#10;      const period = hour &lt; 12 ? &quot;AM&quot; : &quot;PM&quot;&#10;      const time = `${displayHour}:00 ${period}`&#10;      slots.push({ time, available: true })&#10;      &#10;      // Add 30-minute slot if not at the end&#10;      if (hour + 0.5 &lt; end) {&#10;        const halfTime = `${displayHour}:30 ${period}`&#10;        slots.push({ time: halfTime, available: true })&#10;      }&#10;    }&#10;&#10;    console.log('Generated time slots:', slots)&#10;    return slots&#10;  }&#10;&#10;  // Validate selected date against visiting days&#10;  const isValidDate = (date: string): boolean =&gt; {&#10;    if (!doctor || !date) return false&#10;    &#10;    // Check if date is in the future or today&#10;    const selectedDateObj = new Date(date)&#10;    const today = new Date()&#10;    today.setHours(0, 0, 0, 0)&#10;    selectedDateObj.setHours(0, 0, 0, 0)&#10;&#10;    if (selectedDateObj &lt; today) return false&#10;    &#10;    // Try to extract days from visiting hours&#10;    const match = doctor.visiting_hours.match(/\(([^)]+)\)/)&#10;    if (!match) {&#10;      console.log('No specific days found in visiting hours, allowing all days')&#10;      return true // If no days specified, assume all days are valid&#10;    }&#10;&#10;    const daysString = match[1].toLowerCase().trim()&#10;&#10;    // Handle &quot;Everyday&quot; case&#10;    if (daysString === 'everyday' || daysString === 'every day' || daysString === 'daily') {&#10;      console.log('Doctor available everyday, allowing all dates')&#10;      return true&#10;    }&#10;&#10;    const selectedDay = selectedDateObj.toLocaleDateString(&quot;en-US&quot;, { weekday: &quot;short&quot; }).toLowerCase()&#10;&#10;    console.log('Date validation debug:', {&#10;      selectedDate: date,&#10;      selectedDay: selectedDay,&#10;      daysString: daysString,&#10;      visitingHours: doctor.visiting_hours&#10;    })&#10;&#10;    // Improved day matching logic - handle common abbreviations and full names&#10;    const dayMappings: { [key: string]: string[] } = {&#10;      'sun': ['sun', 'sunday', 'sn'],&#10;      'mon': ['mon', 'monday', 'mn'],&#10;      'tue': ['tue', 'tuesday', 'tu', 'tues'],&#10;      'wed': ['wed', 'wednesday', 'wd'],&#10;      'thu': ['thu', 'thursday', 'th', 'thurs'],&#10;      'fri': ['fri', 'friday', 'fr'],&#10;      'sat': ['sat', 'saturday', 'st']&#10;    }&#10;    &#10;    const validDays = dayMappings[selectedDay] || [selectedDay]&#10;&#10;    // Check if any of the valid day formats match what's in the visiting hours&#10;    const isValidDay = validDays.some(day =&gt; {&#10;      // Check for exact match or word boundary match to avoid partial matches&#10;      const regex = new RegExp(`\\b${day}\\b`, 'i')&#10;      return regex.test(daysString) || daysString.includes(day)&#10;    })&#10;&#10;    console.log('Day validation result:', {&#10;      validDays,&#10;      isValidDay,&#10;      selectedDay,&#10;      daysString&#10;    })&#10;&#10;    return isValidDay&#10;  }&#10;&#10;  // Generate list of valid dates for the next 30 days&#10;  const getValidDates = (): string[] =&gt; {&#10;    if (!doctor) return []&#10;&#10;    const validDates: string[] = []&#10;    const today = new Date()&#10;&#10;    // Check next 30 days&#10;    for (let i = 0; i &lt; 30; i++) {&#10;      const checkDate = new Date(today)&#10;      checkDate.setDate(today.getDate() + i)&#10;      const dateString = checkDate.toISOString().split('T')[0]&#10;&#10;      if (isValidDate(dateString)) {&#10;        validDates.push(dateString)&#10;      }&#10;    }&#10;&#10;    return validDates&#10;  }&#10;&#10;  // Get the next valid date&#10;  const getNextValidDate = (): string =&gt; {&#10;    const validDates = getValidDates()&#10;    return validDates.length &gt; 0 ? validDates[0] : ''&#10;  }&#10;&#10;  // Extract visiting days for display&#10;  const getVisitingDays = (): string =&gt; {&#10;    if (!doctor) return 'Not available'&#10;&#10;    const match = doctor.visiting_hours.match(/\(([^)]+)\)/)&#10;    return match ? match[1] : 'All days'&#10;  }&#10;&#10;  // Effect to auto-select first valid date if current selection is invalid&#10;  useEffect(() =&gt; {&#10;    if (doctor &amp;&amp; (!selectedDate || !isValidDate(selectedDate))) {&#10;      const nextValid = getNextValidDate()&#10;      if (nextValid) {&#10;        setSelectedDate(nextValid)&#10;      }&#10;    }&#10;  }, [doctor])&#10;&#10;  // Convert time format from &quot;11:00 AM&quot; to &quot;11:00&quot; (24-hour format)&#10;  const convertTo24HourFormat = (time12h: string): string =&gt; {&#10;    const [time, modifier] = time12h.split(' ')&#10;    let [hours, minutes] = time.split(':')&#10;    if (hours === '12') {&#10;      hours = modifier === 'AM' ? '00' : '12'&#10;    } else {&#10;      hours = modifier === 'AM' ? hours : String(parseInt(hours, 10) + 12)&#10;    }&#10;    return `${hours.padStart(2, '0')}:${minutes}`&#10;  }&#10;&#10;  const handleSubmit = async (e: React.FormEvent) =&gt; {&#10;    e.preventDefault()&#10;&#10;    // Validation checks&#10;    if (!selectedDate || !selectedTime) {&#10;      showToast('Validation Error', 'Please select both date and time for your appointment.', 'warning');&#10;      return&#10;    }&#10;&#10;    if (!isValidDate(selectedDate)) {&#10;      showToast('Validation Error', &quot;Selected date is not within the doctor's visiting days. Please choose a valid date.&quot;, 'warning');&#10;      return&#10;    }&#10;&#10;    setSubmitLoading(true)&#10;&#10;    try {&#10;      const token = localStorage.getItem(&quot;token&quot;)&#10;      if (!token) {&#10;        showToast('Authentication Required', 'Please log in to book an appointment.', 'warning');&#10;        router.push(&quot;/auth&quot;)&#10;        return&#10;      }&#10;&#10;      // Convert time format from &quot;11:00 AM&quot; to &quot;11:00&quot; (24-hour format)&#10;      const timeIn24Format = convertTo24HourFormat(selectedTime)&#10;      const appointmentDateTime = new Date(`${selectedDate}T${timeIn24Format}:00`)&#10;      &#10;      // Prepare appointment data for backend&#10;      const appointmentData = {&#10;        doctors_id: doctor?._id,&#10;        date: appointmentDateTime.toISOString(),&#10;        reason: notes || `${appointmentType.charAt(0).toUpperCase() + appointmentType.slice(1)} appointment with Dr. ${doctor?.name}`,&#10;        appointmentType: appointmentType&#10;      }&#10;&#10;      console.log(&quot;Submitting appointment data:&quot;, appointmentData)&#10;&#10;      const response = await axios.post(&#10;        getApiUrl(API_CONFIG.ENDPOINTS.APPOINTMENTS.CREATE),&#10;        appointmentData,&#10;        {&#10;          headers: {&#10;            Authorization: `Bearer ${token}`,&#10;            'Content-Type': 'application/json'&#10;          }&#10;        }&#10;      )&#10;      &#10;      console.log(&quot;Appointment booked successfully:&quot;, response.data)&#10;&#10;      // Store booking details and show success modal&#10;      setBookingDetails({&#10;        doctor: doctor?.name,&#10;        date: selectedDate,&#10;        time: selectedTime,&#10;        type: appointmentType.charAt(0).toUpperCase() + appointmentType.slice(1)&#10;      })&#10;      setShowSuccessModal(true)&#10;&#10;    } catch (error: any) {&#10;      console.error(&quot;Error booking appointment:&quot;, error)&#10;&#10;      // Enhanced error handling&#10;      if (error.response?.status === 401) {&#10;        showToast('Session Expired', 'Your session has expired. Please log in again to book an appointment.', 'warning');&#10;        router.push(&quot;/auth&quot;)&#10;      } else if (error.response?.status === 400) {&#10;        const errorMessage = error.response?.data?.message || &quot;Invalid appointment details&quot;&#10;        showToast('Booking Failed', `${errorMessage}. Please check: Selected date and time are valid, Doctor is available at this time, All required fields are filled.`, 'error');&#10;      } else if (error.response?.status === 404) {&#10;        showToast('Doctor Not Found', 'Doctor not found. Please try selecting a different doctor.', 'error');&#10;      } else if (error.response?.status === 500) {&#10;        showToast('Server Error', 'Server error occurred. Please try again later or contact support.', 'error');&#10;      } else {&#10;        const errorMessage = error.response?.data?.message || &quot;Failed to book appointment&quot;&#10;        showToast('Booking Failed', `${errorMessage}. Please try again. If the problem persists, contact our support team.`, 'error');&#10;      }&#10;    } finally {&#10;      setSubmitLoading(false)&#10;    }&#10;  }&#10;&#10;  const handleModalClose = () =&gt; {&#10;    setShowSuccessModal(false)&#10;    setBookingDetails(null)&#10;    // Redirect to appointments page&#10;    router.push(&quot;/appointments&quot;)&#10;  }&#10;&#10;  if (loading) {&#10;    return &lt;div&gt;Loading...&lt;/div&gt;&#10;  }&#10;&#10;  if (!doctor) {&#10;    return &lt;div&gt;Error loading doctor data.&lt;/div&gt;&#10;  }&#10;&#10;  return (&#10;    &lt;div className={styles.container}&gt;&#10;      &lt;div className={styles.header}&gt;&#10;        &lt;Link href=&quot;/doctors&quot; className={styles.backButton}&gt;&#10;          &lt;ArrowLeft size={20} /&gt;&#10;          Back to Doctors&#10;        &lt;/Link&gt;&#10;        &lt;h1&gt;Book Appointment&lt;/h1&gt;&#10;      &lt;/div&gt;&#10;&#10;      &lt;div className={styles.content}&gt;&#10;        &lt;div className={styles.doctorInfo}&gt;&#10;          &lt;img&#10;            src={doctor.image_source}&#10;            alt={doctor.name}&#10;            className={styles.doctorImage}&#10;          /&gt;&#10;          &lt;div&gt;&#10;            &lt;h2&gt;{doctor.name}&lt;/h2&gt;&#10;            &lt;p&gt;{doctor.speciality}&lt;/p&gt;&#10;            &lt;p className={styles.hospital}&gt;{doctor.hospital_name}&lt;/p&gt;&#10;          &lt;/div&gt;&#10;        &lt;/div&gt;&#10;&#10;        &lt;form onSubmit={handleSubmit} className={styles.bookingForm}&gt;&#10;          &lt;div className={styles.formSection}&gt;&#10;            &lt;h3&gt;&#10;              &lt;CalendarIcon size={20} /&gt;&#10;              Select Date &amp; Time&#10;            &lt;/h3&gt;&#10;            &lt;div className={styles.dateTimeSelection}&gt;&#10;              &lt;div className={styles.formGroup}&gt;&#10;                &lt;label htmlFor=&quot;date&quot;&gt;Appointment Date&lt;/label&gt;&#10;                &lt;input&#10;                  id=&quot;date&quot;&#10;                  type=&quot;date&quot;&#10;                  value={selectedDate}&#10;                  onChange={(e) =&gt; setSelectedDate(e.target.value)}&#10;                  min={new Date().toISOString().split(&quot;T&quot;)[0]}&#10;                  required&#10;                /&gt;&#10;                {/* Show doctor's available days */}&#10;                &lt;div style={{&#10;                  fontSize: '12px',&#10;                  color: '#666',&#10;                  marginTop: '5px',&#10;                  padding: '8px',&#10;                  backgroundColor: '#f8f9fa',&#10;                  borderRadius: '4px',&#10;                  border: '1px solid #e9ecef'&#10;                }}&gt;&#10;                   &lt;strong&gt;Doctor available on:&lt;/strong&gt; {getVisitingDays()}&lt;br/&gt;&#10;                   &lt;strong&gt;Hours:&lt;/strong&gt; {doctor.visiting_hours.split('(')[0].trim()}&#10;                  {getValidDates().length &gt; 0 &amp;&amp; (&#10;                    &lt;&gt;&#10;                      &lt;br/&gt;✅ &lt;strong&gt;Next available dates:&lt;/strong&gt; {getValidDates().slice(0, 3).map(date =&gt;&#10;                        new Date(date).toLocaleDateString('en-US', { weekday: 'short', month: 'short', day: 'numeric' })&#10;                      ).join(', ')}&#10;                      {getValidDates().length &gt; 3 &amp;&amp; '...'}&#10;                    &lt;/&gt;&#10;                  )}&#10;                &lt;/div&gt;&#10;&#10;                {/* Show warning if selected date is invalid */}&#10;                {selectedDate &amp;&amp; !isValidDate(selectedDate) &amp;&amp; (&#10;                  &lt;div style={{&#10;                    color: '#dc3545',&#10;                    fontSize: '12px',&#10;                    marginTop: '5px',&#10;                    padding: '8px',&#10;                    backgroundColor: '#f8d7da',&#10;                    borderRadius: '4px',&#10;                    border: '1px solid #f5c6cb'&#10;                  }}&gt;&#10;                    ⚠️ This date is not available. Doctor is only available on: {getVisitingDays()}&#10;                  &lt;/div&gt;&#10;                )}&#10;              &lt;/div&gt;&#10;&#10;              &lt;div className={styles.timeSlots}&gt;&#10;                &lt;label&gt;Available Time Slots&lt;/label&gt;&#10;                &lt;div className={styles.timeSlotsGrid}&gt;&#10;                  {timeSlots.length &gt; 0 ? (&#10;                    timeSlots.map((slot, index) =&gt; (&#10;                      &lt;button&#10;                        key={index}&#10;                        type=&quot;button&quot;&#10;                        className={`${styles.timeSlot} ${!slot.available ? styles.unavailable : &quot;&quot;} ${&#10;                          selectedTime === slot.time ? styles.selected : &quot;&quot;&#10;                        }`}&#10;                        onClick={() =&gt; {&#10;                          if (slot.available) {&#10;                            console.log('Time slot selected:', slot.time)&#10;                            setSelectedTime(slot.time)&#10;                          }&#10;                        }}&#10;                        disabled={!slot.available}&#10;                      &gt;&#10;                        &lt;Clock size={16} /&gt;&#10;                        {slot.time}&#10;                      &lt;/button&gt;&#10;                    ))&#10;                  ) : (&#10;                    &lt;p&gt;No available time slots.&lt;/p&gt;&#10;                  )}&#10;                &lt;/div&gt;&#10;              &lt;/div&gt;&#10;            &lt;/div&gt;&#10;          &lt;/div&gt;&#10;&#10;          &lt;div className={styles.formSection}&gt;&#10;            &lt;h3&gt;Appointment Details&lt;/h3&gt;&#10;              &lt;div className={styles.formGroup}&gt;&#10;                &lt;label htmlFor=&quot;type&quot;&gt;Appointment Type&lt;/label&gt;&#10;                &lt;select&#10;                  id=&quot;type&quot;&#10;                  value={appointmentType}&#10;                  onChange={(e) =&gt; setAppointmentType(e.target.value)}&#10;                  required&#10;                &gt;&#10;                  &lt;option value=&quot;consultation&quot;&gt;Consultation&lt;/option&gt;&#10;                  &lt;option value=&quot;followup&quot;&gt;Follow-up&lt;/option&gt;&#10;                  &lt;option value=&quot;checkup&quot;&gt;General Check-up&lt;/option&gt;&#10;                  &lt;option value=&quot;emergency&quot;&gt;Emergency&lt;/option&gt;&#10;                &lt;/select&gt;&#10;              &lt;/div&gt;&#10;&#10;              &lt;div className={styles.formGroup}&gt;&#10;                &lt;label htmlFor=&quot;notes&quot;&gt;Additional Notes&lt;/label&gt;&#10;                &lt;textarea&#10;                  id=&quot;notes&quot;&#10;                  value={notes}&#10;                  onChange={(e) =&gt; setNotes(e.target.value)}&#10;                  placeholder=&quot;Any specific concerns or information you'd like to share...&quot;&#10;                  rows={4}&#10;                /&gt;&#10;              &lt;/div&gt;&#10;            &lt;/div&gt;&#10;&#10;            &lt;div className={styles.summary}&gt;&#10;              &lt;h3&gt;Appointment Summary&lt;/h3&gt;&#10;              &lt;div className={styles.summaryDetails}&gt;&#10;                &lt;div className={styles.summaryItem}&gt;&#10;                  &lt;span&gt;Doctor:&lt;/span&gt;&#10;                  &lt;span&gt;{doctor.name}&lt;/span&gt;&#10;                &lt;/div&gt;&#10;                &lt;div className={styles.summaryItem}&gt;&#10;                  &lt;span&gt;Date:&lt;/span&gt;&#10;                  &lt;span&gt;{selectedDate || &quot;Not selected&quot;}&lt;/span&gt;&#10;                &lt;/div&gt;&#10;                &lt;div className={styles.summaryItem}&gt;&#10;                  &lt;span&gt;Time:&lt;/span&gt;&#10;                  &lt;span&gt;{selectedTime || &quot;Not selected&quot;}&lt;/span&gt;&#10;                &lt;/div&gt;&#10;                &lt;div className={styles.summaryItem}&gt;&#10;                  &lt;span&gt;Type:&lt;/span&gt;&#10;                  &lt;span&gt;{appointmentType.charAt(0).toUpperCase() + appointmentType.slice(1)}&lt;/span&gt;&#10;                &lt;/div&gt;&#10;              &lt;/div&gt;&#10;            &lt;/div&gt;&#10;&#10;            &lt;button&#10;              type=&quot;submit&quot;&#10;              className={styles.submitButton}&#10;              disabled={submitLoading || !selectedDate || !selectedTime}&#10;              style={{&#10;                display: 'block',&#10;                margin: '2rem 0',&#10;                width: '100%',&#10;                minHeight: '50px',&#10;                fontSize: '16px',&#10;                fontWeight: '600'&#10;              }}&#10;            &gt;&#10;              {submitLoading ? &quot;Booking...&quot; : &quot;Confirm Booking&quot;}&#10;            &lt;/button&gt;&#10;            &#10;            {/* Show validation messages */}&#10;            {!selectedDate &amp;&amp; (&#10;              &lt;div style={{ color: '#ef4444', fontSize: '14px', marginBottom: '10px' }}&gt;&#10;                ⚠️ Please select an appointment date&#10;              &lt;/div&gt;&#10;            )}&#10;            {!selectedTime &amp;&amp; selectedDate &amp;&amp; (&#10;              &lt;div style={{ color: '#ef4444', fontSize: '14px', marginBottom: '10px' }}&gt;&#10;                ⚠️ Please select an appointment time&#10;              &lt;/div&gt;&#10;            )}&#10;            {selectedDate &amp;&amp; !isValidDate(selectedDate) &amp;&amp; (&#10;              &lt;div style={{ color: '#ef4444', fontSize: '14px', marginBottom: '10px' }}&gt;&#10;                ⚠️ Selected date is not available for this doctor&#10;              &lt;/div&gt;&#10;            )}&#10;&#10;            {/* Debug information */}&#10;            &lt;div style={{ marginTop: '10px', fontSize: '12px', color: '#666', padding: '10px', background: '#f5f5f5', borderRadius: '5px' }}&gt;&#10;              &lt;strong&gt;Debug Info:&lt;/strong&gt;&lt;br/&gt;&#10;              Date Selected: {selectedDate ? '✅ ' + selectedDate : '❌ Not selected'}&lt;br/&gt;&#10;              Time Selected: {selectedTime ? '✅ ' + selectedTime : '❌ Not selected'}&lt;br/&gt;&#10;              Valid Date: {selectedDate &amp;&amp; isValidDate(selectedDate) ? '✅ Valid' : '❌ Invalid'}&lt;br/&gt;&#10;              Button Enabled: {!submitLoading &amp;&amp; selectedDate &amp;&amp; selectedTime ? '✅ Enabled' : '❌ Disabled'}&lt;br/&gt;&#10;              Doctor Visiting Hours: {doctor?.visiting_hours || 'Not available'}&#10;            &lt;/div&gt;&#10;        &lt;/form&gt;&#10;      &lt;/div&gt;&#10;&#10;      {/* Success Modal */}&#10;      {showSuccessModal &amp;&amp; bookingDetails &amp;&amp; (&#10;        &lt;div className={styles.modalOverlay}&gt;&#10;          &lt;div className={styles.modalContent}&gt;&#10;            &lt;h2&gt;Appointment Request Submitted&lt;/h2&gt;&#10;            &lt;p&gt; Your appointment request has been submitted successfully!&lt;/p&gt;&#10;            &lt;div className={styles.modalDetails}&gt;&#10;              &lt;div&gt;&lt;strong&gt;Doctor:&lt;/strong&gt; Dr. {bookingDetails.doctor}&lt;/div&gt;&#10;              &lt;div&gt;&lt;strong&gt;Date:&lt;/strong&gt; {bookingDetails.date}&lt;/div&gt;&#10;              &lt;div&gt;&lt;strong&gt;Time:&lt;/strong&gt; {bookingDetails.time}&lt;/div&gt;&#10;              &lt;div&gt;&lt;strong&gt;Type:&lt;/strong&gt; {bookingDetails.type}&lt;/div&gt;&#10;            &lt;/div&gt;&#10;            &lt;p&gt;&#10;              You will receive an email confirmation shortly.&lt;br/&gt;&#10;              Please wait for the admin to approve your appointment.&#10;            &lt;/p&gt;&#10;            &lt;button onClick={handleModalClose} className={styles.closeButton}&gt;&#10;              Close&#10;            &lt;/button&gt;&#10;          &lt;/div&gt;&#10;        &lt;/div&gt;&#10;      )}&#10;    &lt;/div&gt;&#10;  )&#10;}&#10;" />
              <option name="updatedContent" value="&quot;use client&quot;&#13;&#10;&#13;&#10;import { useState, useEffect } from &quot;react&quot;&#13;&#10;import { useRouter, useParams } from &quot;next/navigation&quot;&#13;&#10;import { Calendar as CalendarIcon, Clock, ArrowLeft } from &quot;lucide-react&quot;&#13;&#10;import Link from &quot;next/link&quot;&#13;&#10;import axios from &quot;axios&quot;&#13;&#10;import styles from &quot;./book.module.css&quot;&#13;&#10;import { getApiUrl, API_CONFIG } from '@/config/api';&#13;&#10;import Toast from &quot;../../../components/Toast/Toast&quot;;&#13;&#10;import Loading from &quot;../../../components/Loading/Loading&quot;;&#13;&#10;&#13;&#10;interface Doctor {&#13;&#10;  _id: string&#13;&#10;  name: string&#13;&#10;  speciality: string&#13;&#10;  hospital_name: string&#13;&#10;  image_source: string&#13;&#10;  visiting_hours: string&#13;&#10;  degree: string&#13;&#10;  address: string&#13;&#10;  number: string&#13;&#10;  About: string&#13;&#10;  latitude: string&#13;&#10;  longitude: string&#13;&#10;}&#13;&#10;&#13;&#10;interface TimeSlot {&#13;&#10;  time: string&#13;&#10;  available: boolean&#13;&#10;}&#13;&#10;&#13;&#10;interface User {&#13;&#10;  _id: string&#13;&#10;  name: string&#13;&#10;  email: string&#13;&#10;  bio: string&#13;&#10;  gender: string&#13;&#10;  age: number | null&#13;&#10;  phone: string&#13;&#10;  address: string&#13;&#10;  zip_code: string&#13;&#10;  country: string&#13;&#10;  state: string&#13;&#10;  city: string&#13;&#10;  profile_pic: string&#13;&#10;  role: string&#13;&#10;  status: string&#13;&#10;  blood_group: string&#13;&#10;  weight: string&#13;&#10;  height: string&#13;&#10;  allergies: string&#13;&#10;  medical_conditions: string&#13;&#10;  medications: string&#13;&#10;  surgeries: string&#13;&#10;  family_medical_history: string&#13;&#10;  emergency_contact: string&#13;&#10;  date: string&#13;&#10;  __v: number&#13;&#10;}&#13;&#10;&#13;&#10;export default function BookAppointmentPage() {&#13;&#10;  const router = useRouter()&#13;&#10;  const params = useParams()&#13;&#10;  const doctorId = params.id as string&#13;&#10;  console.log(doctorId)&#13;&#10;&#13;&#10;  const [doctor, setDoctor] = useState&lt;Doctor | null&gt;(null)&#13;&#10;  const [user, setUser] = useState&lt;User | null&gt;(null)&#13;&#10;  const [loggedIn, setLoggedIn] = useState(false)&#13;&#10;  const [loading, setLoading] = useState(true)&#13;&#10;  const [error, setError] = useState(&quot;&quot;)&#13;&#10;  const [selectedDate, setSelectedDate] = useState(&quot;&quot;)&#13;&#10;  const [selectedTime, setSelectedTime] = useState(&quot;&quot;)&#13;&#10;  const [appointmentType, setAppointmentType] = useState(&quot;consultation&quot;)&#13;&#10;  const [notes, setNotes] = useState(&quot;&quot;)&#13;&#10;  const [submitLoading, setSubmitLoading] = useState(false)&#13;&#10;  const [timeSlots, setTimeSlots] = useState&lt;TimeSlot[]&gt;([])&#13;&#10;  const [showSuccessModal, setShowSuccessModal] = useState(false)&#13;&#10;  const [bookingDetails, setBookingDetails] = useState&lt;any&gt;(null)&#13;&#10;  const [toast, setToast] = useState&lt;{&#13;&#10;    isOpen: boolean;&#13;&#10;    title: string;&#13;&#10;    message: string;&#13;&#10;    type: 'success' | 'error' | 'warning' | 'info';&#13;&#10;  }&gt;({&#13;&#10;    isOpen: false,&#13;&#10;    title: '',&#13;&#10;    message: '',&#13;&#10;    type: 'info'&#13;&#10;  })&#13;&#10;&#13;&#10;  const showToast = (title: string, message: string, type: 'success' | 'error' | 'warning' | 'info' = 'info') =&gt; {&#13;&#10;    setToast({&#13;&#10;      isOpen: true,&#13;&#10;      title,&#13;&#10;      message,&#13;&#10;      type&#13;&#10;    });&#13;&#10;  };&#13;&#10;&#13;&#10;  // Fetch user data and check authentication&#13;&#10;  useEffect(() =&gt; {&#13;&#10;    const fetchUserData = async () =&gt; {&#13;&#10;      const token = localStorage.getItem(&quot;token&quot;)&#13;&#10;      if (!token) {&#13;&#10;        setLoggedIn(false)&#13;&#10;        setLoading(false)&#13;&#10;        router.push(&quot;/auth&quot;)&#13;&#10;        return&#13;&#10;      }&#13;&#10;      try {&#13;&#10;        const response = await axios.get(getApiUrl(API_CONFIG.ENDPOINTS.AUTH.PROFILE), {&#13;&#10;          headers: { Authorization: `Bearer ${token}` },&#13;&#10;        })&#13;&#10;        setUser(response.data)&#13;&#10;        setLoggedIn(true)&#13;&#10;      } catch (err) {&#13;&#10;        console.error(&quot;Failed to fetch user data:&quot;, err)&#13;&#10;        setError(&quot;Failed to fetch user data.&quot;)&#13;&#10;        setLoggedIn(false)&#13;&#10;        router.push(&quot;/auth&quot;)&#13;&#10;      } finally {&#13;&#10;        setLoading(false)&#13;&#10;      }&#13;&#10;    }&#13;&#10;&#13;&#10;    fetchUserData()&#13;&#10;  }, [router])&#13;&#10;&#13;&#10;  // Fetch doctor data&#13;&#10;  useEffect(() =&gt; {&#13;&#10;    const fetchDoctor = async () =&gt; {&#13;&#10;      if (!doctorId) return&#13;&#10;      try {&#13;&#10;        const response = await axios.get&lt;Doctor&gt;(getApiUrl(`${API_CONFIG.ENDPOINTS.DOCTORS.DETAIL}/${doctorId}`))&#13;&#10;        setDoctor(response.data)&#13;&#10;        // Generate time slots from visiting_hours&#13;&#10;        const slots = generateTimeSlots(response.data.visiting_hours)&#13;&#10;        setTimeSlots(slots)&#13;&#10;      } catch (err) {&#13;&#10;        console.error(&quot;Failed to fetch doctor data:&quot;, err)&#13;&#10;        setError(&quot;Failed to fetch doctor data.&quot;)&#13;&#10;      }&#13;&#10;    }&#13;&#10;&#13;&#10;    fetchDoctor()&#13;&#10;  }, [doctorId])&#13;&#10;&#13;&#10;  // Function to parse visiting_hours and generate time slots&#13;&#10;  const generateTimeSlots = (visitingHours: string): TimeSlot[] =&gt; {&#13;&#10;    console.log('Generating time slots for visiting hours:', visitingHours)&#13;&#10;&#13;&#10;    // Try multiple regex patterns to handle different formats&#13;&#10;    let match = visitingHours.match(/(\d+)(?::\d+)?\s*(am|pm)\s*to\s*(\d+)(?::\d+)?\s*(am|pm)\s*\(([^)]+)\)/i)&#13;&#10;&#13;&#10;    // If first pattern doesn't match, try without parentheses (for &quot;Everyday&quot; cases)&#13;&#10;    if (!match) {&#13;&#10;      match = visitingHours.match(/(\d+)(?::\d+)?\s*(am|pm)\s*to\s*(\d+)(?::\d+)?\s*(am|pm)/i)&#13;&#10;      console.log('Trying pattern without parentheses:', match)&#13;&#10;    }&#13;&#10;&#13;&#10;    // If still no match, try with different separators&#13;&#10;    if (!match) {&#13;&#10;      match = visitingHours.match(/(\d+)(?::\d+)?\s*(am|pm)\s*[-–—]\s*(\d+)(?::\d+)?\s*(am|pm)/i)&#13;&#10;      console.log('Trying pattern with dash separator:', match)&#13;&#10;    }&#13;&#10;&#13;&#10;    if (!match) {&#13;&#10;      console.log('No matching pattern found for visiting hours:', visitingHours)&#13;&#10;      // Return default slots if we can't parse the format&#13;&#10;      return [&#13;&#10;        { time: &quot;9:00 AM&quot;, available: true },&#13;&#10;        { time: &quot;9:30 AM&quot;, available: true },&#13;&#10;        { time: &quot;10:00 AM&quot;, available: true },&#13;&#10;        { time: &quot;10:30 AM&quot;, available: true },&#13;&#10;        { time: &quot;11:00 AM&quot;, available: true },&#13;&#10;        { time: &quot;11:30 AM&quot;, available: true },&#13;&#10;        { time: &quot;2:00 PM&quot;, available: true },&#13;&#10;        { time: &quot;2:30 PM&quot;, available: true },&#13;&#10;        { time: &quot;3:00 PM&quot;, available: true },&#13;&#10;        { time: &quot;3:30 PM&quot;, available: true },&#13;&#10;        { time: &quot;4:00 PM&quot;, available: true },&#13;&#10;        { time: &quot;4:30 PM&quot;, available: true }&#13;&#10;      ]&#13;&#10;    }&#13;&#10;&#13;&#10;    const [, startHour, startPeriod, endHour, endPeriod] = match&#13;&#10;    let start = parseInt(startHour)&#13;&#10;    let end = parseInt(endHour)&#13;&#10;    &#13;&#10;    console.log('Parsed time:', { startHour, startPeriod, endHour, endPeriod })&#13;&#10;&#13;&#10;    // Convert to 24-hour format for calculation&#13;&#10;    if (startPeriod.toLowerCase() === &quot;pm&quot; &amp;&amp; start !== 12) start += 12&#13;&#10;    if (startPeriod.toLowerCase() === &quot;am&quot; &amp;&amp; start === 12) start = 0&#13;&#10;    if (endPeriod.toLowerCase() === &quot;pm&quot; &amp;&amp; end !== 12) end += 12&#13;&#10;    if (endPeriod.toLowerCase() === &quot;am&quot; &amp;&amp; end === 12) end = 0&#13;&#10;&#13;&#10;    console.log('Converted to 24-hour:', { start, end })&#13;&#10;&#13;&#10;    const slots: TimeSlot[] = []&#13;&#10;    for (let hour = start; hour &lt; end; hour++) {&#13;&#10;      // Convert back to 12-hour format for display&#13;&#10;      const displayHour = hour === 0 ? 12 : hour &gt; 12 ? hour - 12 : hour&#13;&#10;      const period = hour &lt; 12 ? &quot;AM&quot; : &quot;PM&quot;&#13;&#10;      const time = `${displayHour}:00 ${period}`&#13;&#10;      slots.push({ time, available: true })&#13;&#10;      &#13;&#10;      // Add 30-minute slot if not at the end&#13;&#10;      if (hour + 0.5 &lt; end) {&#13;&#10;        const halfTime = `${displayHour}:30 ${period}`&#13;&#10;        slots.push({ time: halfTime, available: true })&#13;&#10;      }&#13;&#10;    }&#13;&#10;&#13;&#10;    console.log('Generated time slots:', slots)&#13;&#10;    return slots&#13;&#10;  }&#13;&#10;&#13;&#10;  // Validate selected date against visiting days&#13;&#10;  const isValidDate = (date: string): boolean =&gt; {&#13;&#10;    if (!doctor || !date) return false&#13;&#10;    &#13;&#10;    // Check if date is in the future or today&#13;&#10;    const selectedDateObj = new Date(date)&#13;&#10;    const today = new Date()&#13;&#10;    today.setHours(0, 0, 0, 0)&#13;&#10;    selectedDateObj.setHours(0, 0, 0, 0)&#13;&#10;&#13;&#10;    if (selectedDateObj &lt; today) return false&#13;&#10;    &#13;&#10;    // Try to extract days from visiting hours&#13;&#10;    const match = doctor.visiting_hours.match(/\(([^)]+)\)/)&#13;&#10;    if (!match) {&#13;&#10;      console.log('No specific days found in visiting hours, allowing all days')&#13;&#10;      return true // If no days specified, assume all days are valid&#13;&#10;    }&#13;&#10;&#13;&#10;    const daysString = match[1].toLowerCase().trim()&#13;&#10;&#13;&#10;    // Handle &quot;Everyday&quot; case&#13;&#10;    if (daysString === 'everyday' || daysString === 'every day' || daysString === 'daily') {&#13;&#10;      console.log('Doctor available everyday, allowing all dates')&#13;&#10;      return true&#13;&#10;    }&#13;&#10;&#13;&#10;    const selectedDay = selectedDateObj.toLocaleDateString(&quot;en-US&quot;, { weekday: &quot;short&quot; }).toLowerCase()&#13;&#10;&#13;&#10;    console.log('Date validation debug:', {&#13;&#10;      selectedDate: date,&#13;&#10;      selectedDay: selectedDay,&#13;&#10;      daysString: daysString,&#13;&#10;      visitingHours: doctor.visiting_hours&#13;&#10;    })&#13;&#10;&#13;&#10;    // Improved day matching logic - handle common abbreviations and full names&#13;&#10;    const dayMappings: { [key: string]: string[] } = {&#13;&#10;      'sun': ['sun', 'sunday', 'sn'],&#13;&#10;      'mon': ['mon', 'monday', 'mn'],&#13;&#10;      'tue': ['tue', 'tuesday', 'tu', 'tues'],&#13;&#10;      'wed': ['wed', 'wednesday', 'wd'],&#13;&#10;      'thu': ['thu', 'thursday', 'th', 'thurs'],&#13;&#10;      'fri': ['fri', 'friday', 'fr'],&#13;&#10;      'sat': ['sat', 'saturday', 'st']&#13;&#10;    }&#13;&#10;    &#13;&#10;    const validDays = dayMappings[selectedDay] || [selectedDay]&#13;&#10;&#13;&#10;    // Check if any of the valid day formats match what's in the visiting hours&#13;&#10;    const isValidDay = validDays.some(day =&gt; {&#13;&#10;      // Check for exact match or word boundary match to avoid partial matches&#13;&#10;      const regex = new RegExp(`\\b${day}\\b`, 'i')&#13;&#10;      return regex.test(daysString) || daysString.includes(day)&#13;&#10;    })&#13;&#10;&#13;&#10;    console.log('Day validation result:', {&#13;&#10;      validDays,&#13;&#10;      isValidDay,&#13;&#10;      selectedDay,&#13;&#10;      daysString&#13;&#10;    })&#13;&#10;&#13;&#10;    return isValidDay&#13;&#10;  }&#13;&#10;&#13;&#10;  // Generate list of valid dates for the next 30 days&#13;&#10;  const getValidDates = (): string[] =&gt; {&#13;&#10;    if (!doctor) return []&#13;&#10;&#13;&#10;    const validDates: string[] = []&#13;&#10;    const today = new Date()&#13;&#10;&#13;&#10;    // Check next 30 days&#13;&#10;    for (let i = 0; i &lt; 30; i++) {&#13;&#10;      const checkDate = new Date(today)&#13;&#10;      checkDate.setDate(today.getDate() + i)&#13;&#10;      const dateString = checkDate.toISOString().split('T')[0]&#13;&#10;&#13;&#10;      if (isValidDate(dateString)) {&#13;&#10;        validDates.push(dateString)&#13;&#10;      }&#13;&#10;    }&#13;&#10;&#13;&#10;    return validDates&#13;&#10;  }&#13;&#10;&#13;&#10;  // Get the next valid date&#13;&#10;  const getNextValidDate = (): string =&gt; {&#13;&#10;    const validDates = getValidDates()&#13;&#10;    return validDates.length &gt; 0 ? validDates[0] : ''&#13;&#10;  }&#13;&#10;&#13;&#10;  // Extract visiting days for display&#13;&#10;  const getVisitingDays = (): string =&gt; {&#13;&#10;    if (!doctor) return 'Not available'&#13;&#10;&#13;&#10;    const match = doctor.visiting_hours.match(/\(([^)]+)\)/)&#13;&#10;    return match ? match[1] : 'All days'&#13;&#10;  }&#13;&#10;&#13;&#10;  // Effect to auto-select first valid date if current selection is invalid&#13;&#10;  useEffect(() =&gt; {&#13;&#10;    if (doctor &amp;&amp; (!selectedDate || !isValidDate(selectedDate))) {&#13;&#10;      const nextValid = getNextValidDate()&#13;&#10;      if (nextValid) {&#13;&#10;        setSelectedDate(nextValid)&#13;&#10;      }&#13;&#10;    }&#13;&#10;  }, [doctor])&#13;&#10;&#13;&#10;  // Convert time format from &quot;11:00 AM&quot; to &quot;11:00&quot; (24-hour format)&#13;&#10;  const convertTo24HourFormat = (time12h: string): string =&gt; {&#13;&#10;    const [time, modifier] = time12h.split(' ')&#13;&#10;    let [hours, minutes] = time.split(':')&#13;&#10;    if (hours === '12') {&#13;&#10;      hours = modifier === 'AM' ? '00' : '12'&#13;&#10;    } else {&#13;&#10;      hours = modifier === 'AM' ? hours : String(parseInt(hours, 10) + 12)&#13;&#10;    }&#13;&#10;    return `${hours.padStart(2, '0')}:${minutes}`&#13;&#10;  }&#13;&#10;&#13;&#10;  const handleSubmit = async (e: React.FormEvent) =&gt; {&#13;&#10;    e.preventDefault()&#13;&#10;&#13;&#10;    // Validation checks&#13;&#10;    if (!selectedDate || !selectedTime) {&#13;&#10;      showToast('Validation Error', 'Please select both date and time for your appointment.', 'warning');&#13;&#10;      return&#13;&#10;    }&#13;&#10;&#13;&#10;    if (!isValidDate(selectedDate)) {&#13;&#10;      showToast('Validation Error', &quot;Selected date is not within the doctor's visiting days. Please choose a valid date.&quot;, 'warning');&#13;&#10;      return&#13;&#10;    }&#13;&#10;&#13;&#10;    setSubmitLoading(true)&#13;&#10;&#13;&#10;    try {&#13;&#10;      const token = localStorage.getItem(&quot;token&quot;)&#13;&#10;      if (!token) {&#13;&#10;        showToast('Authentication Required', 'Please log in to book an appointment.', 'warning');&#13;&#10;        router.push(&quot;/auth&quot;)&#13;&#10;        return&#13;&#10;      }&#13;&#10;&#13;&#10;      // Convert time format from &quot;11:00 AM&quot; to &quot;11:00&quot; (24-hour format)&#13;&#10;      const timeIn24Format = convertTo24HourFormat(selectedTime)&#13;&#10;      const appointmentDateTime = new Date(`${selectedDate}T${timeIn24Format}:00`)&#13;&#10;      &#13;&#10;      // Prepare appointment data for backend&#13;&#10;      const appointmentData = {&#13;&#10;        doctors_id: doctor?._id,&#13;&#10;        date: appointmentDateTime.toISOString(),&#13;&#10;        reason: notes || `${appointmentType.charAt(0).toUpperCase() + appointmentType.slice(1)} appointment with Dr. ${doctor?.name}`,&#13;&#10;        appointmentType: appointmentType&#13;&#10;      }&#13;&#10;&#13;&#10;      console.log(&quot;Submitting appointment data:&quot;, appointmentData)&#13;&#10;&#13;&#10;      const response = await axios.post(&#13;&#10;        getApiUrl(API_CONFIG.ENDPOINTS.APPOINTMENTS.CREATE),&#13;&#10;        appointmentData,&#13;&#10;        {&#13;&#10;          headers: {&#13;&#10;            Authorization: `Bearer ${token}`,&#13;&#10;            'Content-Type': 'application/json'&#13;&#10;          }&#13;&#10;        }&#13;&#10;      )&#13;&#10;      &#13;&#10;      console.log(&quot;Appointment booked successfully:&quot;, response.data)&#13;&#10;&#13;&#10;      // Store booking details and show success modal&#13;&#10;      setBookingDetails({&#13;&#10;        doctor: doctor?.name,&#13;&#10;        date: selectedDate,&#13;&#10;        time: selectedTime,&#13;&#10;        type: appointmentType.charAt(0).toUpperCase() + appointmentType.slice(1)&#13;&#10;      })&#13;&#10;      setShowSuccessModal(true)&#13;&#10;&#13;&#10;    } catch (error: any) {&#13;&#10;      console.error(&quot;Error booking appointment:&quot;, error)&#13;&#10;&#13;&#10;      // Enhanced error handling&#13;&#10;      if (error.response?.status === 401) {&#13;&#10;        showToast('Session Expired', 'Your session has expired. Please log in again to book an appointment.', 'warning');&#13;&#10;        router.push(&quot;/auth&quot;)&#13;&#10;      } else if (error.response?.status === 400) {&#13;&#10;        const errorMessage = error.response?.data?.message || &quot;Invalid appointment details&quot;&#13;&#10;        showToast('Booking Failed', `${errorMessage}. Please check: Selected date and time are valid, Doctor is available at this time, All required fields are filled.`, 'error');&#13;&#10;      } else if (error.response?.status === 404) {&#13;&#10;        showToast('Doctor Not Found', 'Doctor not found. Please try selecting a different doctor.', 'error');&#13;&#10;      } else if (error.response?.status === 500) {&#13;&#10;        showToast('Server Error', 'Server error occurred. Please try again later or contact support.', 'error');&#13;&#10;      } else {&#13;&#10;        const errorMessage = error.response?.data?.message || &quot;Failed to book appointment&quot;&#13;&#10;        showToast('Booking Failed', `${errorMessage}. Please try again. If the problem persists, contact our support team.`, 'error');&#13;&#10;      }&#13;&#10;    } finally {&#13;&#10;      setSubmitLoading(false)&#13;&#10;    }&#13;&#10;  }&#13;&#10;&#13;&#10;  const handleModalClose = () =&gt; {&#13;&#10;    setShowSuccessModal(false)&#13;&#10;    setBookingDetails(null)&#13;&#10;    // Redirect to appointments page&#13;&#10;    router.push(&quot;/appointments&quot;)&#13;&#10;  }&#13;&#10;&#13;&#10;  if (loading) {&#13;&#10;    return &lt;Loading /&gt;;&#13;&#10;  }&#13;&#10;&#13;&#10;  if (!doctor) {&#13;&#10;    return &lt;div&gt;Error loading doctor data.&lt;/div&gt;&#13;&#10;  }&#13;&#10;&#13;&#10;  return (&#13;&#10;    &lt;div className={styles.container}&gt;&#13;&#10;      &lt;div className={styles.header}&gt;&#13;&#10;        &lt;Link href=&quot;/doctors&quot; className={styles.backButton}&gt;&#13;&#10;          &lt;ArrowLeft size={20} /&gt;&#13;&#10;          Back to Doctors&#13;&#10;        &lt;/Link&gt;&#13;&#10;        &lt;h1&gt;Book Appointment&lt;/h1&gt;&#13;&#10;      &lt;/div&gt;&#13;&#10;&#13;&#10;      &lt;div className={styles.content}&gt;&#13;&#10;        &lt;div className={styles.doctorInfo}&gt;&#13;&#10;          &lt;img&#13;&#10;            src={doctor.image_source}&#13;&#10;            alt={doctor.name}&#13;&#10;            className={styles.doctorImage}&#13;&#10;          /&gt;&#13;&#10;          &lt;div&gt;&#13;&#10;            &lt;h2&gt;{doctor.name}&lt;/h2&gt;&#13;&#10;            &lt;p&gt;{doctor.speciality}&lt;/p&gt;&#13;&#10;            &lt;p className={styles.hospital}&gt;{doctor.hospital_name}&lt;/p&gt;&#13;&#10;          &lt;/div&gt;&#13;&#10;        &lt;/div&gt;&#13;&#10;&#13;&#10;        &lt;form onSubmit={handleSubmit} className={styles.bookingForm}&gt;&#13;&#10;          &lt;div className={styles.formSection}&gt;&#13;&#10;            &lt;h3&gt;&#13;&#10;              &lt;CalendarIcon size={20} /&gt;&#13;&#10;              Select Date &amp; Time&#13;&#10;            &lt;/h3&gt;&#13;&#10;            &lt;div className={styles.dateTimeSelection}&gt;&#13;&#10;              &lt;div className={styles.formGroup}&gt;&#13;&#10;                &lt;label htmlFor=&quot;date&quot;&gt;Appointment Date&lt;/label&gt;&#13;&#10;                &lt;input&#13;&#10;                  id=&quot;date&quot;&#13;&#10;                  type=&quot;date&quot;&#13;&#10;                  value={selectedDate}&#13;&#10;                  onChange={(e) =&gt; setSelectedDate(e.target.value)}&#13;&#10;                  min={new Date().toISOString().split(&quot;T&quot;)[0]}&#13;&#10;                  required&#13;&#10;                /&gt;&#13;&#10;                {/* Show doctor's available days */}&#13;&#10;                &lt;div style={{&#13;&#10;                  fontSize: '12px',&#13;&#10;                  color: '#666',&#13;&#10;                  marginTop: '5px',&#13;&#10;                  padding: '8px',&#13;&#10;                  backgroundColor: '#f8f9fa',&#13;&#10;                  borderRadius: '4px',&#13;&#10;                  border: '1px solid #e9ecef'&#13;&#10;                }}&gt;&#13;&#10;                   &lt;strong&gt;Doctor available on:&lt;/strong&gt; {getVisitingDays()}&lt;br/&gt;&#13;&#10;                   &lt;strong&gt;Hours:&lt;/strong&gt; {doctor.visiting_hours.split('(')[0].trim()}&#13;&#10;                  {getValidDates().length &gt; 0 &amp;&amp; (&#13;&#10;                    &lt;&gt;&#13;&#10;                      &lt;br/&gt;✅ &lt;strong&gt;Next available dates:&lt;/strong&gt; {getValidDates().slice(0, 3).map(date =&gt;&#13;&#10;                        new Date(date).toLocaleDateString('en-US', { weekday: 'short', month: 'short', day: 'numeric' })&#13;&#10;                      ).join(', ')}&#13;&#10;                      {getValidDates().length &gt; 3 &amp;&amp; '...'}&#13;&#10;                    &lt;/&gt;&#13;&#10;                  )}&#13;&#10;                &lt;/div&gt;&#13;&#10;&#13;&#10;                {/* Show warning if selected date is invalid */}&#13;&#10;                {selectedDate &amp;&amp; !isValidDate(selectedDate) &amp;&amp; (&#13;&#10;                  &lt;div style={{&#13;&#10;                    color: '#dc3545',&#13;&#10;                    fontSize: '12px',&#13;&#10;                    marginTop: '5px',&#13;&#10;                    padding: '8px',&#13;&#10;                    backgroundColor: '#f8d7da',&#13;&#10;                    borderRadius: '4px',&#13;&#10;                    border: '1px solid #f5c6cb'&#13;&#10;                  }}&gt;&#13;&#10;                    ⚠️ This date is not available. Doctor is only available on: {getVisitingDays()}&#13;&#10;                  &lt;/div&gt;&#13;&#10;                )}&#13;&#10;              &lt;/div&gt;&#13;&#10;&#13;&#10;              &lt;div className={styles.timeSlots}&gt;&#13;&#10;                &lt;label&gt;Available Time Slots&lt;/label&gt;&#13;&#10;                &lt;div className={styles.timeSlotsGrid}&gt;&#13;&#10;                  {timeSlots.length &gt; 0 ? (&#13;&#10;                    timeSlots.map((slot, index) =&gt; (&#13;&#10;                      &lt;button&#13;&#10;                        key={index}&#13;&#10;                        type=&quot;button&quot;&#13;&#10;                        className={`${styles.timeSlot} ${!slot.available ? styles.unavailable : &quot;&quot;} ${&#13;&#10;                          selectedTime === slot.time ? styles.selected : &quot;&quot;&#13;&#10;                        }`}&#13;&#10;                        onClick={() =&gt; {&#13;&#10;                          if (slot.available) {&#13;&#10;                            console.log('Time slot selected:', slot.time)&#13;&#10;                            setSelectedTime(slot.time)&#13;&#10;                          }&#13;&#10;                        }}&#13;&#10;                        disabled={!slot.available}&#13;&#10;                      &gt;&#13;&#10;                        &lt;Clock size={16} /&gt;&#13;&#10;                        {slot.time}&#13;&#10;                      &lt;/button&gt;&#13;&#10;                    ))&#13;&#10;                  ) : (&#13;&#10;                    &lt;p&gt;No available time slots.&lt;/p&gt;&#13;&#10;                  )}&#13;&#10;                &lt;/div&gt;&#13;&#10;              &lt;/div&gt;&#13;&#10;            &lt;/div&gt;&#13;&#10;          &lt;/div&gt;&#13;&#10;&#13;&#10;          &lt;div className={styles.formSection}&gt;&#13;&#10;            &lt;h3&gt;Appointment Details&lt;/h3&gt;&#13;&#10;              &lt;div className={styles.formGroup}&gt;&#13;&#10;                &lt;label htmlFor=&quot;type&quot;&gt;Appointment Type&lt;/label&gt;&#13;&#10;                &lt;select&#13;&#10;                  id=&quot;type&quot;&#13;&#10;                  value={appointmentType}&#13;&#10;                  onChange={(e) =&gt; setAppointmentType(e.target.value)}&#13;&#10;                  required&#13;&#10;                &gt;&#13;&#10;                  &lt;option value=&quot;consultation&quot;&gt;Consultation&lt;/option&gt;&#13;&#10;                  &lt;option value=&quot;followup&quot;&gt;Follow-up&lt;/option&gt;&#13;&#10;                  &lt;option value=&quot;checkup&quot;&gt;General Check-up&lt;/option&gt;&#13;&#10;                  &lt;option value=&quot;emergency&quot;&gt;Emergency&lt;/option&gt;&#13;&#10;                &lt;/select&gt;&#13;&#10;              &lt;/div&gt;&#13;&#10;&#13;&#10;              &lt;div className={styles.formGroup}&gt;&#13;&#10;                &lt;label htmlFor=&quot;notes&quot;&gt;Additional Notes&lt;/label&gt;&#13;&#10;                &lt;textarea&#13;&#10;                  id=&quot;notes&quot;&#13;&#10;                  value={notes}&#13;&#10;                  onChange={(e) =&gt; setNotes(e.target.value)}&#13;&#10;                  placeholder=&quot;Any specific concerns or information you'd like to share...&quot;&#13;&#10;                  rows={4}&#13;&#10;                /&gt;&#13;&#10;              &lt;/div&gt;&#13;&#10;            &lt;/div&gt;&#13;&#10;&#13;&#10;            &lt;div className={styles.summary}&gt;&#13;&#10;              &lt;h3&gt;Appointment Summary&lt;/h3&gt;&#13;&#10;              &lt;div className={styles.summaryDetails}&gt;&#13;&#10;                &lt;div className={styles.summaryItem}&gt;&#13;&#10;                  &lt;span&gt;Doctor:&lt;/span&gt;&#13;&#10;                  &lt;span&gt;{doctor.name}&lt;/span&gt;&#13;&#10;                &lt;/div&gt;&#13;&#10;                &lt;div className={styles.summaryItem}&gt;&#13;&#10;                  &lt;span&gt;Date:&lt;/span&gt;&#13;&#10;                  &lt;span&gt;{selectedDate || &quot;Not selected&quot;}&lt;/span&gt;&#13;&#10;                &lt;/div&gt;&#13;&#10;                &lt;div className={styles.summaryItem}&gt;&#13;&#10;                  &lt;span&gt;Time:&lt;/span&gt;&#13;&#10;                  &lt;span&gt;{selectedTime || &quot;Not selected&quot;}&lt;/span&gt;&#13;&#10;                &lt;/div&gt;&#13;&#10;                &lt;div className={styles.summaryItem}&gt;&#13;&#10;                  &lt;span&gt;Type:&lt;/span&gt;&#13;&#10;                  &lt;span&gt;{appointmentType.charAt(0).toUpperCase() + appointmentType.slice(1)}&lt;/span&gt;&#13;&#10;                &lt;/div&gt;&#13;&#10;              &lt;/div&gt;&#13;&#10;            &lt;/div&gt;&#13;&#10;&#13;&#10;            &lt;button&#13;&#10;              type=&quot;submit&quot;&#13;&#10;              className={styles.submitButton}&#13;&#10;              disabled={submitLoading || !selectedDate || !selectedTime}&#13;&#10;              style={{&#13;&#10;                display: 'block',&#13;&#10;                margin: '2rem 0',&#13;&#10;                width: '100%',&#13;&#10;                minHeight: '50px',&#13;&#10;                fontSize: '16px',&#13;&#10;                fontWeight: '600'&#13;&#10;              }}&#13;&#10;            &gt;&#13;&#10;              {submitLoading ? &quot;Booking...&quot; : &quot;Confirm Booking&quot;}&#13;&#10;            &lt;/button&gt;&#13;&#10;            &#13;&#10;            {/* Show validation messages */}&#13;&#10;            {!selectedDate &amp;&amp; (&#13;&#10;              &lt;div style={{ color: '#ef4444', fontSize: '14px', marginBottom: '10px' }}&gt;&#13;&#10;                ⚠️ Please select an appointment date&#13;&#10;              &lt;/div&gt;&#13;&#10;            )}&#13;&#10;            {!selectedTime &amp;&amp; selectedDate &amp;&amp; (&#13;&#10;              &lt;div style={{ color: '#ef4444', fontSize: '14px', marginBottom: '10px' }}&gt;&#13;&#10;                ⚠️ Please select an appointment time&#13;&#10;              &lt;/div&gt;&#13;&#10;            )}&#13;&#10;            {selectedDate &amp;&amp; !isValidDate(selectedDate) &amp;&amp; (&#13;&#10;              &lt;div style={{ color: '#ef4444', fontSize: '14px', marginBottom: '10px' }}&gt;&#13;&#10;                ⚠️ Selected date is not available for this doctor&#13;&#10;              &lt;/div&gt;&#13;&#10;            )}&#13;&#10;&#13;&#10;            {/* Debug information */}&#13;&#10;            &lt;div style={{ marginTop: '10px', fontSize: '12px', color: '#666', padding: '10px', background: '#f5f5f5', borderRadius: '5px' }}&gt;&#13;&#10;              &lt;strong&gt;Debug Info:&lt;/strong&gt;&lt;br/&gt;&#13;&#10;              Date Selected: {selectedDate ? '✅ ' + selectedDate : '❌ Not selected'}&lt;br/&gt;&#13;&#10;              Time Selected: {selectedTime ? '✅ ' + selectedTime : '❌ Not selected'}&lt;br/&gt;&#13;&#10;              Valid Date: {selectedDate &amp;&amp; isValidDate(selectedDate) ? '✅ Valid' : '❌ Invalid'}&lt;br/&gt;&#13;&#10;              Button Enabled: {!submitLoading &amp;&amp; selectedDate &amp;&amp; selectedTime ? '✅ Enabled' : '❌ Disabled'}&lt;br/&gt;&#13;&#10;              Doctor Visiting Hours: {doctor?.visiting_hours || 'Not available'}&#13;&#10;            &lt;/div&gt;&#13;&#10;        &lt;/form&gt;&#13;&#10;      &lt;/div&gt;&#13;&#10;&#13;&#10;      {/* Success Modal */}&#13;&#10;      {showSuccessModal &amp;&amp; bookingDetails &amp;&amp; (&#13;&#10;        &lt;div className={styles.modalOverlay}&gt;&#13;&#10;          &lt;div className={styles.modalContent}&gt;&#13;&#10;            &lt;h2&gt;Appointment Request Submitted&lt;/h2&gt;&#13;&#10;            &lt;p&gt; Your appointment request has been submitted successfully!&lt;/p&gt;&#13;&#10;            &lt;div className={styles.modalDetails}&gt;&#13;&#10;              &lt;div&gt;&lt;strong&gt;Doctor:&lt;/strong&gt; Dr. {bookingDetails.doctor}&lt;/div&gt;&#13;&#10;              &lt;div&gt;&lt;strong&gt;Date:&lt;/strong&gt; {bookingDetails.date}&lt;/div&gt;&#13;&#10;              &lt;div&gt;&lt;strong&gt;Time:&lt;/strong&gt; {bookingDetails.time}&lt;/div&gt;&#13;&#10;              &lt;div&gt;&lt;strong&gt;Type:&lt;/strong&gt; {bookingDetails.type}&lt;/div&gt;&#13;&#10;            &lt;/div&gt;&#13;&#10;            &lt;p&gt;&#13;&#10;              You will receive an email confirmation shortly.&lt;br/&gt;&#13;&#10;              Please wait for the admin to approve your appointment.&#13;&#10;            &lt;/p&gt;&#13;&#10;            &lt;button onClick={handleModalClose} className={styles.closeButton}&gt;&#13;&#10;              Close&#13;&#10;            &lt;/button&gt;&#13;&#10;          &lt;/div&gt;&#13;&#10;        &lt;/div&gt;&#13;&#10;      )}&#13;&#10;    &lt;/div&gt;&#13;&#10;  )&#13;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/profile/profile.module.css">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/profile/profile.module.css" />
              <option name="originalContent" value=".container {&#10;  min-height: 100vh;&#10;  background: #f9fafb;&#10;  display: flex;&#10;  position: relative;&#10;}&#10;&#10;.sidebar {&#10;  width: 280px;&#10;  background: white;&#10;  padding: 2rem;&#10;  border-right: 1px solid #e5e7eb;&#10;  display: flex;&#10;  flex-direction: column;&#10;  position: fixed;&#10;  height: 100vh;&#10;  z-index: 50;&#10;  transition: transform 0.3s ease-in-out;&#10;}&#10;&#10;.mainLogo {&#10;  font-size: 1.5rem;&#10;  font-weight: 700;&#10;  margin-bottom: 2rem;&#10;  text-decoration: none;&#10;  display: flex;&#10;  align-items: center;&#10;  gap: 0.35rem;&#10;  color: inherit;&#10;  transition: transform 0.3s ease;&#10;}&#10;&#10;.mainLogo:hover {&#10;  transform: scale(1.02);&#10;}&#10;&#10;.logoIcon {&#10;  width: 40px;&#10;  height: 40px;&#10;  background: transparent;&#10;  border-radius: 12px;&#10;  display: flex;&#10;  align-items: center;&#10;  justify-content: center;&#10;  color: #9333ea;&#10;  transition: all 0.3s ease;&#10;  position: relative;&#10;  overflow: hidden;&#10;}&#10;&#10;.logoIcon svg {&#10;  position: relative;&#10;  z-index: 2;&#10;  transition: all 0.3s ease;&#10;  transform-origin: center;&#10;}&#10;&#10;.mainLogo:hover .logoIcon svg {&#10;  transform: rotate(-12deg);&#10;  color: #7928ca;&#10;}&#10;&#10;.mainLogo span {&#10;  font-size: 1.25rem;&#10;  font-weight: 600;&#10;  background: linear-gradient(135deg, #9333ea 0%, #7928ca 100%);&#10;  -webkit-background-clip: text;&#10;  -webkit-text-fill-color: transparent;&#10;  background-clip: text;&#10;  background-size: 200% auto;&#10;  transition: all 0.3s ease;&#10;}&#10;&#10;.mainLogo:hover span {&#10;  background-position: right center;&#10;}&#10;&#10;.navItem {&#10;  display: flex;&#10;  align-items: center;&#10;  gap: 0.75rem;&#10;  padding: 0.75rem;&#10;  color: #4b5563;&#10;  text-decoration: none;&#10;  border-radius: 0.5rem;&#10;  transition: all 0.2s ease;&#10;  margin-bottom: 0.5rem;&#10;  border: none;&#10;  background: none;&#10;  font-size: inherit;&#10;  width: 100%;&#10;  text-align: left;&#10;  cursor: pointer;&#10;}&#10;&#10;.navItem:hover {&#10;  background: #f3f4f6;&#10;  color: #9333ea;&#10;}&#10;&#10;.logoutButton {&#10;  color: #4b5563;&#10;  font-weight: 500;&#10;}&#10;.navItem.active {&#10;  background: #f3e8ff;&#10;  color: #9333ea;&#10;  font-weight: 500;&#10;}&#10;&#10;.bottomNav {&#10;  margin-top: auto;&#10;  border-top: 1px solid #e5e7eb;&#10;  padding-top: 1rem;&#10;}&#10;&#10;.menuButton {&#10;  position: fixed;&#10;  top: 1rem;&#10;  left: 1rem;&#10;  z-index: 60;&#10;  background: rgba(255, 255, 255, 0.9);&#10;  border: none;&#10;  border-radius: 0.75rem;&#10;  padding: 0.75rem;&#10;  display: none;&#10;  cursor: pointer;&#10;  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);&#10;  backdrop-filter: blur(8px);&#10;  color: #4b5563;&#10;  transition: all 0.2s ease;&#10;}&#10;&#10;.menuButton:hover {&#10;  background: #9333ea;&#10;  color: white;&#10;  transform: translateY(-1px);&#10;  box-shadow: 0 6px 16px rgba(147, 51, 234, 0.2);&#10;}&#10;&#10;@media (max-width: 768px) {&#10;  .menuButton {&#10;    display: block;&#10;  }&#10;}&#10;.main {&#10;  flex: 1;&#10;  margin-left: 280px;&#10;  padding: 2rem;&#10;  width: 100%;&#10;}&#10;&#10;.header {&#10;  background: white;&#10;  border-radius: 1rem;&#10;  padding: 2rem;&#10;  margin-bottom: 2rem;&#10;  display: flex;&#10;  align-items: center;&#10;  gap: 2rem;&#10;  box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);&#10;}&#10;&#10;.profileImage {&#10;  width: 120px;&#10;  height: 120px;&#10;  border-radius: 1rem;&#10;  overflow: hidden;&#10;  border: 4px solid #f3e8ff;&#10;}&#10;&#10;.profileImage img {&#10;  width: 100%;&#10;  height: 100%;&#10;  object-fit: cover;&#10;}&#10;&#10;.profileInfo {&#10;  flex: 1;&#10;}&#10;&#10;.name {&#10;  font-size: 2rem;&#10;  font-weight: 700;&#10;  color: #111827;&#10;  margin-bottom: 0.5rem;&#10;}&#10;&#10;.metadata {&#10;  display: flex;&#10;  gap: 2rem;&#10;  color: #6b7280;&#10;  font-size: 0.875rem;&#10;}&#10;&#10;.metaItem {&#10;  display: flex;&#10;  align-items: center;&#10;  gap: 0.5rem;&#10;}&#10;&#10;.grid {&#10;  display: grid;&#10;  grid-template-columns: repeat(2, 1fr);&#10;  gap: 2rem;&#10;}&#10;&#10;@media (max-width: 1024px) {&#10;  .grid {&#10;    grid-template-columns: 1fr;&#10;  }&#10;}&#10;&#10;@media (max-width: 768px) {&#10;  .sidebar {&#10;    transform: translateX(-100%);&#10;    box-shadow: 2px 0 8px rgba(0, 0, 0, 0.1);&#10;  }&#10;&#10;  .sidebar.open {&#10;    transform: translateX(0);&#10;  }&#10;&#10;  .main {&#10;    margin-left: 0;&#10;    padding: 1rem;&#10;  }&#10;&#10;  .header {&#10;    flex-direction: column;&#10;    text-align: center;&#10;    gap: 1rem;&#10;    padding: 1.5rem;&#10;  }&#10;&#10;  .profileInfo {&#10;    text-align: center;&#10;  }&#10;&#10;  .metadata {&#10;    flex-direction: column;&#10;    gap: 1rem;&#10;    align-items: center;&#10;  }&#10;&#10;  .name {&#10;    font-size: 1.5rem;&#10;  }&#10;}&#10;&#10;@media (max-width: 480px) {&#10;  .statsGrid {&#10;    grid-template-columns: 1fr;&#10;  }&#10;&#10;  .statItem {&#10;    padding: 0.75rem;&#10;  }&#10;&#10;  .historyItem {&#10;    padding: 0.75rem;&#10;  }&#10;&#10;  .card {&#10;    padding: 1rem;&#10;  }&#10;}&#10;.card {&#10;  background: white;&#10;  border-radius: 1rem;&#10;  padding: 1.5rem;&#10;  box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);&#10;}&#10;&#10;.cardTitle {&#10;  font-size: 1.25rem;&#10;  font-weight: 600;&#10;  color: #111827;&#10;  margin-bottom: 1.5rem;&#10;  display: flex;&#10;  align-items: center;&#10;  gap: 0.5rem;&#10;}&#10;&#10;/* Activity Tabs */&#10;.activityTabs {&#10;  display: flex;&#10;  background: #f3f4f6;&#10;  border-radius: 0.75rem;&#10;  padding: 0.25rem;&#10;  margin-bottom: 1.5rem;&#10;  gap: 0.25rem;&#10;}&#10;&#10;.tabButton {&#10;  flex: 1;&#10;  display: flex;&#10;  align-items: center;&#10;  justify-content: center;&#10;  gap: 0.5rem;&#10;  padding: 0.75rem 1rem;&#10;  border-radius: 0.5rem;&#10;  border: none;&#10;  background: transparent;&#10;  color: #6b7280;&#10;  font-size: 0.875rem;&#10;  font-weight: 500;&#10;  cursor: pointer;&#10;  transition: all 0.2s ease;&#10;}&#10;&#10;.tabButton:hover {&#10;  color: #374151;&#10;  background: rgba(255, 255, 255, 0.5);&#10;}&#10;&#10;.tabButton.active {&#10;  background: white;&#10;  color: #9333ea;&#10;  box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);&#10;}&#10;&#10;.activityContent {&#10;  min-height: 200px;&#10;}&#10;&#10;.historyItem {&#10;  display: flex;&#10;  align-items: center;&#10;  gap: 1rem;&#10;  padding: 1rem;&#10;  border-radius: 0.5rem;&#10;  transition: all 0.2s ease;&#10;  cursor: pointer;&#10;}&#10;&#10;.historyItem:hover {&#10;  background: #f3f4f6;&#10;}&#10;&#10;.historyIcon {&#10;  width: 40px;&#10;  height: 40px;&#10;  border-radius: 0.5rem;&#10;  background: #f3e8ff;&#10;  display: flex;&#10;  align-items: center;&#10;  justify-content: center;&#10;  color: #9333ea;&#10;}&#10;&#10;.historyContent {&#10;  flex: 1;&#10;}&#10;&#10;.historyTitle {&#10;  font-weight: 500;&#10;  color: #111827;&#10;  margin-bottom: 0.25rem;&#10;}&#10;&#10;.historyMeta {&#10;  color: #6b7280;&#10;  font-size: 0.875rem;&#10;}&#10;&#10;.healthStatus {&#10;  display: flex;&#10;  flex-direction: column;&#10;  gap: 1rem;&#10;}&#10;&#10;.statusItem {&#10;  display: flex;&#10;  align-items: center;&#10;  gap: 0.5rem;&#10;  color: #4b5563;&#10;}&#10;&#10;.statusIcon {&#10;  width: 24px;&#10;  height: 24px;&#10;  border-radius: 50%;&#10;  background: #f3e8ff;&#10;  display: flex;&#10;  align-items: center;&#10;  justify-content: center;&#10;  color: #9333ea;&#10;}&#10;&#10;.chart {&#10;  margin-top: 1rem;&#10;  height: 200px;&#10;  width: 100%;&#10;}&#10;&#10;.statsGrid {&#10;  display: grid;&#10;  grid-template-columns: repeat(2, 1fr);&#10;  gap: 1rem;&#10;  margin-top: 1rem;&#10;}&#10;&#10;.statItem {&#10;  background: #f9fafb;&#10;  padding: 1rem;&#10;  border-radius: 0.5rem;&#10;  display: flex;&#10;  align-items: center;&#10;  gap: 1rem;&#10;}&#10;&#10;.statIcon {&#10;  width: 40px;&#10;  height: 40px;&#10;  border-radius: 0.5rem;&#10;  background: #f3e8ff;&#10;  display: flex;&#10;  align-items: center;&#10;  justify-content: center;&#10;  color: #9333ea;&#10;}&#10;&#10;.statContent {&#10;  flex: 1;&#10;}&#10;&#10;.statLabel {&#10;  color: #6b7280;&#10;  font-size: 0.875rem;&#10;  margin-bottom: 0.25rem;&#10;}&#10;&#10;.statValue {&#10;  font-weight: 600;&#10;  color: #111827;&#10;}&#10;&#10;.editButton {&#10;  background: #9333ea;&#10;  color: white;&#10;  text-decoration: none;&#10;  padding: 0.75rem 1.5rem;&#10;  border-radius: 0.5rem;&#10;  border: none;&#10;  font-weight: 500;&#10;  cursor: pointer;&#10;  transition: all 0.2s ease;&#10;  display: flex;&#10;  align-items: center;&#10;  gap: 0.5rem;&#10;}&#10;&#10;.editButton:hover {&#10;  background: #7928ca;&#10;}&#10;&#10;.viewMore {&#10;  display: inline-block;&#10;  margin-top: 0.5rem;&#10;  color: #9333ea;&#10;  font-size: 0.875rem;&#10;  text-decoration: none;&#10;  transition: color 0.2s ease;&#10;}&#10;&#10;.viewMore:hover {&#10;  color: #7928ca;&#10;}&#10;&#10;/* Recent Activities Styles */&#10;.activitySection {&#10;  margin-bottom: 2rem;&#10;}&#10;&#10;.activitySection:last-child {&#10;  margin-bottom: 0;&#10;}&#10;&#10;.sectionTitle {&#10;  font-size: 1.125rem;&#10;  font-weight: 600;&#10;  color: #374151;&#10;  margin-bottom: 1rem;&#10;  padding-bottom: 0.5rem;&#10;  border-bottom: 2px solid #f3e8ff;&#10;  position: relative;&#10;}&#10;&#10;.sectionTitle::after {&#10;  content: '';&#10;  position: absolute;&#10;  bottom: -2px;&#10;  left: 0;&#10;  width: 60px;&#10;  height: 2px;&#10;  background: #9333ea;&#10;  border-radius: 1px;&#10;}&#10;&#10;.activityList {&#10;  display: flex;&#10;  flex-direction: column;&#10;  gap: 0.75rem;&#10;}&#10;&#10;.activityItem {&#10;  display: flex;&#10;  align-items: flex-start;&#10;  gap: 0.75rem;&#10;  padding: 0.75rem;&#10;  border-radius: 0.5rem;&#10;  border: 1px solid #e5e7eb;&#10;  transition: all 0.2s ease;&#10;  background: #fefefe;&#10;  position: relative;&#10;  overflow: hidden;&#10;}&#10;&#10;.activityItem::before {&#10;  content: '';&#10;  position: absolute;&#10;  top: 0;&#10;  left: 0;&#10;  width: 3px;&#10;  height: 100%;&#10;  background: #9333ea;&#10;  opacity: 0;&#10;  transition: opacity 0.2s ease;&#10;}&#10;&#10;.activityItem:hover {&#10;  background: #f8fafc;&#10;  border-color: #d1d5db;&#10;  transform: translateY(-1px) scale(0.98);&#10;  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.05);&#10;}&#10;&#10;.activityItem:hover::before {&#10;  opacity: 1;&#10;}&#10;&#10;.activityIcon {&#10;  width: 32px;&#10;  height: 32px;&#10;  border-radius: 0.5rem;&#10;  background: linear-gradient(135deg, #f3e8ff 0%, #ede9fe 100%);&#10;  display: flex;&#10;  align-items: center;&#10;  justify-content: center;&#10;  color: #9333ea;&#10;  flex-shrink: 0;&#10;  transition: all 0.2s ease;&#10;  position: relative;&#10;  overflow: hidden;&#10;}&#10;&#10;.activityIcon::before {&#10;  content: '';&#10;  position: absolute;&#10;  top: 0;&#10;  left: 0;&#10;  right: 0;&#10;  bottom: 0;&#10;  background: linear-gradient(135deg, #9333ea 0%, #7928ca 100%);&#10;  opacity: 0;&#10;  transition: opacity 0.2s ease;&#10;  border-radius: inherit;&#10;}&#10;&#10;.activityItem:hover .activityIcon::before {&#10;  opacity: 0.1;&#10;}&#10;&#10;.activityIcon svg {&#10;  position: relative;&#10;  z-index: 2;&#10;  transition: transform 0.2s ease;&#10;}&#10;&#10;.activityItem:hover .activityIcon svg {&#10;  transform: scale(1.1);&#10;}&#10;&#10;.activityContent {&#10;  flex: 1;&#10;  min-width: 0;&#10;}&#10;&#10;.activityTitle {&#10;  font-weight: 600;&#10;  color: #111827;&#10;  margin-bottom: 0.125rem;&#10;  font-size: 0.875rem;&#10;  line-height: 1.3;&#10;}&#10;&#10;.activityMeta {&#10;  color: #6b7280;&#10;  font-size: 0.75rem;&#10;  margin-bottom: 0.375rem;&#10;  display: flex;&#10;  align-items: center;&#10;  gap: 0.5rem;&#10;}&#10;&#10;.activityDescription {&#10;  color: #4b5563;&#10;  font-size: 0.8rem;&#10;  line-height: 1.3;&#10;  display: -webkit-box;&#10;  -webkit-line-clamp: 1;&#10;  -webkit-box-orient: vertical;&#10;  overflow: hidden;&#10;  text-overflow: ellipsis;&#10;}&#10;&#10;.emptyState {&#10;  text-align: center;&#10;  padding: 2rem 1rem;&#10;  color: #9ca3af;&#10;  font-style: italic;&#10;  background: #f9fafb;&#10;  border-radius: 0.75rem;&#10;  border: 2px dashed #e5e7eb;&#10;}&#10;&#10;/* Responsive adjustments for activities */&#10;@media (max-width: 768px) {&#10;  .activityItem {&#10;    padding: 0.875rem;&#10;    gap: 0.75rem;&#10;  }&#10;&#10;  .activityIcon {&#10;    width: 36px;&#10;    height: 36px;&#10;  }&#10;&#10;  .activityTitle {&#10;    font-size: 0.875rem;&#10;  }&#10;&#10;  .activityMeta {&#10;    font-size: 0.75rem;&#10;  }&#10;&#10;  .activityDescription {&#10;    font-size: 0.8rem;&#10;  }&#10;&#10;  .sectionTitle {&#10;    font-size: 1rem;&#10;  }&#10;}&#10;&#10;@media (max-width: 480px) {&#10;  .activitySection {&#10;    margin-bottom: 1.5rem;&#10;  }&#10;&#10;  .activityItem {&#10;    padding: 0.75rem;&#10;    gap: 0.625rem;&#10;  }&#10;&#10;  .activityIcon {&#10;    width: 32px;&#10;    height: 32px;&#10;  }&#10;&#10;  .emptyState {&#10;    padding: 1.5rem 0.75rem;&#10;    font-size: 0.875rem;&#10;  }&#10;}&#10;" />
              <option name="updatedContent" value=".container {&#10;  min-height: 100vh;&#10;  background: #f9fafb;&#10;  display: flex;&#10;  position: relative;&#10;}&#10;&#10;.sidebar {&#10;  width: 280px;&#10;  background: white;&#10;  padding: 2rem;&#10;  border-right: 1px solid #e5e7eb;&#10;  display: flex;&#10;  flex-direction: column;&#10;  position: fixed;&#10;  height: 100vh;&#10;  z-index: 50;&#10;  transition: transform 0.3s ease-in-out;&#10;}&#10;&#10;.mainLogo {&#10;  font-size: 1.5rem;&#10;  font-weight: 700;&#10;  margin-bottom: 2rem;&#10;  text-decoration: none;&#10;  display: flex;&#10;  align-items: center;&#10;  gap: 0.35rem;&#10;  color: inherit;&#10;  transition: transform 0.3s ease;&#10;}&#10;&#10;.mainLogo:hover {&#10;  transform: scale(1.02);&#10;}&#10;&#10;.logoIcon {&#10;  width: 40px;&#10;  height: 40px;&#10;  background: transparent;&#10;  border-radius: 12px;&#10;  display: flex;&#10;  align-items: center;&#10;  justify-content: center;&#10;  color: #9333ea;&#10;  transition: all 0.3s ease;&#10;  position: relative;&#10;  overflow: hidden;&#10;}&#10;&#10;.logoIcon svg {&#10;  position: relative;&#10;  z-index: 2;&#10;  transition: all 0.3s ease;&#10;  transform-origin: center;&#10;}&#10;&#10;.mainLogo:hover .logoIcon svg {&#10;  transform: rotate(-12deg);&#10;  color: #7928ca;&#10;}&#10;&#10;.mainLogo span {&#10;  font-size: 1.25rem;&#10;  font-weight: 600;&#10;  background: linear-gradient(135deg, #9333ea 0%, #7928ca 100%);&#10;  -webkit-background-clip: text;&#10;  -webkit-text-fill-color: transparent;&#10;  background-clip: text;&#10;  background-size: 200% auto;&#10;  transition: all 0.3s ease;&#10;}&#10;&#10;.mainLogo:hover span {&#10;  background-position: right center;&#10;}&#10;&#10;.navItem {&#10;  display: flex;&#10;  align-items: center;&#10;  gap: 0.75rem;&#10;  padding: 0.75rem;&#10;  color: #4b5563;&#10;  text-decoration: none;&#10;  border-radius: 0.5rem;&#10;  transition: all 0.2s ease;&#10;  margin-bottom: 0.5rem;&#10;  border: none;&#10;  background: none;&#10;  font-size: inherit;&#10;  width: 100%;&#10;  text-align: left;&#10;  cursor: pointer;&#10;}&#10;&#10;.navItem:hover {&#10;  background: #f3f4f6;&#10;  color: #9333ea;&#10;}&#10;&#10;.logoutButton {&#10;  color: #4b5563;&#10;  font-weight: 500;&#10;}&#10;.navItem.active {&#10;  background: #f3e8ff;&#10;  color: #9333ea;&#10;  font-weight: 500;&#10;}&#10;&#10;.bottomNav {&#10;  margin-top: auto;&#10;  border-top: 1px solid #e5e7eb;&#10;  padding-top: 1rem;&#10;}&#10;&#10;.menuButton {&#10;  position: fixed;&#10;  top: 1rem;&#10;  left: 1rem;&#10;  z-index: 60;&#10;  background: rgba(255, 255, 255, 0.9);&#10;  border: none;&#10;  border-radius: 0.75rem;&#10;  padding: 0.75rem;&#10;  display: none;&#10;  cursor: pointer;&#10;  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);&#10;  backdrop-filter: blur(8px);&#10;  color: #4b5563;&#10;  transition: all 0.2s ease;&#10;}&#10;&#10;.menuButton:hover {&#10;  background: #9333ea;&#10;  color: white;&#10;  transform: translateY(-1px);&#10;  box-shadow: 0 6px 16px rgba(147, 51, 234, 0.2);&#10;}&#10;&#10;@media (max-width: 768px) {&#10;  .menuButton {&#10;    display: block;&#10;  }&#10;}&#10;.main {&#10;  flex: 1;&#10;  margin-left: 280px;&#10;  padding: 2rem;&#10;  width: 100%;&#10;}&#10;&#10;.header {&#10;  background: white;&#10;  border-radius: 1rem;&#10;  padding: 2rem;&#10;  margin-bottom: 2rem;&#10;  display: flex;&#10;  align-items: center;&#10;  gap: 2rem;&#10;  box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);&#10;}&#10;&#10;.profileImage {&#10;  width: 120px;&#10;  height: 120px;&#10;  border-radius: 1rem;&#10;  overflow: hidden;&#10;  border: 4px solid #f3e8ff;&#10;}&#10;&#10;.profileImage img {&#10;  width: 100%;&#10;  height: 100%;&#10;  object-fit: cover;&#10;}&#10;&#10;.profileInfo {&#10;  flex: 1;&#10;}&#10;&#10;.name {&#10;  font-size: 2rem;&#10;  font-weight: 700;&#10;  color: #111827;&#10;  margin-bottom: 0.5rem;&#10;}&#10;&#10;.metadata {&#10;  display: flex;&#10;  gap: 2rem;&#10;  color: #6b7280;&#10;  font-size: 0.875rem;&#10;}&#10;&#10;.metaItem {&#10;  display: flex;&#10;  align-items: center;&#10;  gap: 0.5rem;&#10;}&#10;&#10;.grid {&#10;  display: grid;&#10;  grid-template-columns: repeat(2, 1fr);&#10;  gap: 2rem;&#10;}&#10;&#10;@media (max-width: 1024px) {&#10;  .grid {&#10;    grid-template-columns: 1fr;&#10;  }&#10;}&#10;&#10;@media (max-width: 768px) {&#10;  .sidebar {&#10;    transform: translateX(-100%);&#10;    box-shadow: 2px 0 8px rgba(0, 0, 0, 0.1);&#10;  }&#10;&#10;  .sidebar.open {&#10;    transform: translateX(0);&#10;  }&#10;&#10;  .main {&#10;    margin-left: 0;&#10;    padding: 1rem;&#10;  }&#10;&#10;  .header {&#10;    flex-direction: column;&#10;    text-align: center;&#10;    gap: 1rem;&#10;    padding: 1.5rem;&#10;  }&#10;&#10;  .profileInfo {&#10;    text-align: center;&#10;  }&#10;&#10;  .metadata {&#10;    flex-direction: column;&#10;    gap: 1rem;&#10;    align-items: center;&#10;  }&#10;&#10;  .name {&#10;    font-size: 1.5rem;&#10;  }&#10;}&#10;&#10;@media (max-width: 480px) {&#10;  .statsGrid {&#10;    grid-template-columns: 1fr;&#10;  }&#10;&#10;  .statItem {&#10;    padding: 0.75rem;&#10;  }&#10;&#10;  .historyItem {&#10;    padding: 0.75rem;&#10;  }&#10;&#10;  .card {&#10;    padding: 1rem;&#10;  }&#10;}&#10;.card {&#10;  background: white;&#10;  border-radius: 1rem;&#10;  padding: 1.5rem;&#10;  box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);&#10;}&#10;&#10;.cardTitle {&#10;  font-size: 1.25rem;&#10;  font-weight: 600;&#10;  color: #111827;&#10;  margin-bottom: 1.5rem;&#10;  display: flex;&#10;  align-items: center;&#10;  gap: 0.5rem;&#10;}&#10;&#10;/* Activity Tabs */&#10;.activityTabs {&#10;  display: flex;&#10;  background: #f3f4f6;&#10;  border-radius: 0.75rem;&#10;  padding: 0.25rem;&#10;  margin-bottom: 1.5rem;&#10;  gap: 0.25rem;&#10;}&#10;&#10;.tabButton {&#10;  flex: 1;&#10;  display: flex;&#10;  align-items: center;&#10;  justify-content: center;&#10;  gap: 0.5rem;&#10;  padding: 0.75rem 1rem;&#10;  border-radius: 0.5rem;&#10;  border: none;&#10;  background: transparent;&#10;  color: #6b7280;&#10;  font-size: 0.875rem;&#10;  font-weight: 500;&#10;  cursor: pointer;&#10;  transition: all 0.2s ease;&#10;}&#10;&#10;.tabButton:hover {&#10;  color: #374151;&#10;  background: rgba(255, 255, 255, 0.5);&#10;}&#10;&#10;.tabButton.active {&#10;  background: white;&#10;  color: #9333ea;&#10;  box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);&#10;}&#10;&#10;.activityContent {&#10;  min-height: 200px;&#10;}&#10;&#10;.historyItem {&#10;  display: flex;&#10;  align-items: center;&#10;  gap: 1rem;&#10;  padding: 1rem;&#10;  border-radius: 0.5rem;&#10;  transition: all 0.2s ease;&#10;  cursor: pointer;&#10;}&#10;&#10;.historyItem:hover {&#10;  background: #f3f4f6;&#10;}&#10;&#10;.historyIcon {&#10;  width: 40px;&#10;  height: 40px;&#10;  border-radius: 0.5rem;&#10;  background: #f3e8ff;&#10;  display: flex;&#10;  align-items: center;&#10;  justify-content: center;&#10;  color: #9333ea;&#10;}&#10;&#10;.historyContent {&#10;  flex: 1;&#10;}&#10;&#10;.historyTitle {&#10;  font-weight: 500;&#10;  color: #111827;&#10;  margin-bottom: 0.25rem;&#10;}&#10;&#10;.historyMeta {&#10;  color: #6b7280;&#10;  font-size: 0.875rem;&#10;}&#10;&#10;.healthStatus {&#10;  display: flex;&#10;  flex-direction: column;&#10;  gap: 1rem;&#10;}&#10;&#10;.statusItem {&#10;  display: flex;&#10;  align-items: center;&#10;  gap: 0.5rem;&#10;  color: #4b5563;&#10;}&#10;&#10;.statusIcon {&#10;  width: 24px;&#10;  height: 24px;&#10;  border-radius: 50%;&#10;  background: #f3e8ff;&#10;  display: flex;&#10;  align-items: center;&#10;  justify-content: center;&#10;  color: #9333ea;&#10;}&#10;&#10;.chart {&#10;  margin-top: 1rem;&#10;  height: 200px;&#10;  width: 100%;&#10;}&#10;&#10;.statsGrid {&#10;  display: grid;&#10;  grid-template-columns: repeat(2, 1fr);&#10;  gap: 1rem;&#10;  margin-top: 1rem;&#10;}&#10;&#10;.statItem {&#10;  background: #f9fafb;&#10;  padding: 1rem;&#10;  border-radius: 0.5rem;&#10;  display: flex;&#10;  align-items: center;&#10;  gap: 1rem;&#10;}&#10;&#10;.statIcon {&#10;  width: 40px;&#10;  height: 40px;&#10;  border-radius: 0.5rem;&#10;  background: #f3e8ff;&#10;  display: flex;&#10;  align-items: center;&#10;  justify-content: center;&#10;  color: #9333ea;&#10;}&#10;&#10;.statContent {&#10;  flex: 1;&#10;}&#10;&#10;.statLabel {&#10;  color: #6b7280;&#10;  font-size: 0.875rem;&#10;  margin-bottom: 0.25rem;&#10;}&#10;&#10;.statValue {&#10;  font-weight: 600;&#10;  color: #111827;&#10;}&#10;&#10;.editButton {&#10;  background: #9333ea;&#10;  color: white;&#10;  text-decoration: none;&#10;  padding: 0.75rem 1.5rem;&#10;  border-radius: 0.5rem;&#10;  border: none;&#10;  font-weight: 500;&#10;  cursor: pointer;&#10;  transition: all 0.2s ease;&#10;  display: flex;&#10;  align-items: center;&#10;  gap: 0.5rem;&#10;}&#10;&#10;.editButton:hover {&#10;  background: #7928ca;&#10;}&#10;&#10;.viewMore {&#10;  display: inline-block;&#10;  margin-top: 0.5rem;&#10;  color: #9333ea;&#10;  font-size: 0.875rem;&#10;  text-decoration: none;&#10;  transition: color 0.2s ease;&#10;}&#10;&#10;.viewMore:hover {&#10;  color: #7928ca;&#10;}&#10;&#10;/* Recent Activities Styles */&#10;.activitySection {&#10;  margin-bottom: 2rem;&#10;}&#10;&#10;.activitySection:last-child {&#10;  margin-bottom: 0;&#10;}&#10;&#10;.sectionTitle {&#10;  font-size: 1.125rem;&#10;  font-weight: 600;&#10;  color: #374151;&#10;  margin-bottom: 1rem;&#10;  padding-bottom: 0.5rem;&#10;  border-bottom: 2px solid #f3e8ff;&#10;  position: relative;&#10;}&#10;&#10;.sectionTitle::after {&#10;  content: '';&#10;  position: absolute;&#10;  bottom: -2px;&#10;  left: 0;&#10;  width: 60px;&#10;  height: 2px;&#10;  background: #9333ea;&#10;  border-radius: 1px;&#10;}&#10;&#10;.activityList {&#10;  display: flex;&#10;  flex-direction: column;&#10;  gap: 0.75rem;&#10;}&#10;&#10;.activityItem {&#10;  display: flex;&#10;  align-items: flex-start;&#10;  gap: 0.75rem;&#10;  padding: 0.75rem;&#10;  border-radius: 0.5rem;&#10;  border: 1px solid #e5e7eb;&#10;  transition: all 0.2s ease;&#10;  background: #fefefe;&#10;  position: relative;&#10;  overflow: hidden;&#10;}&#10;&#10;.activityItem::before {&#10;  content: '';&#10;  position: absolute;&#10;  top: 0;&#10;  left: 0;&#10;  width: 3px;&#10;  height: 100%;&#10;  background: #9333ea;&#10;  opacity: 0;&#10;  transition: opacity 0.2s ease;&#10;}&#10;&#10;.activityItem:hover {&#10;  background: #f8fafc;&#10;  border-color: #d1d5db;&#10;  transform: translateY(-1px) scale(0.98);&#10;  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.05);&#10;}&#10;&#10;.activityItem:hover::before {&#10;  opacity: 1;&#10;}&#10;&#10;.activityIcon {&#10;  width: 32px;&#10;  height: 32px;&#10;  border-radius: 0.5rem;&#10;  background: linear-gradient(135deg, #f3e8ff 0%, #ede9fe 100%);&#10;  display: flex;&#10;  align-items: center;&#10;  justify-content: center;&#10;  color: #9333ea;&#10;  flex-shrink: 0;&#10;  transition: all 0.2s ease;&#10;  position: relative;&#10;  overflow: hidden;&#10;}&#10;&#10;.activityIcon::before {&#10;  content: '';&#10;  position: absolute;&#10;  top: 0;&#10;  left: 0;&#10;  right: 0;&#10;  bottom: 0;&#10;  background: linear-gradient(135deg, #9333ea 0%, #7928ca 100%);&#10;  opacity: 0;&#10;  transition: opacity 0.2s ease;&#10;  border-radius: inherit;&#10;}&#10;&#10;.activityItem:hover .activityIcon::before {&#10;  opacity: 0.1;&#10;}&#10;&#10;.activityIcon svg {&#10;  position: relative;&#10;  z-index: 2;&#10;  transition: transform 0.2s ease;&#10;}&#10;&#10;.activityItem:hover .activityIcon svg {&#10;  transform: scale(1.1);&#10;}&#10;&#10;.activityContent {&#10;  flex: 1;&#10;  min-width: 0;&#10;}&#10;&#10;.activityTitle {&#10;  font-weight: 600;&#10;  color: #111827;&#10;  margin-bottom: 0.125rem;&#10;  font-size: 0.875rem;&#10;  line-height: 1.3;&#10;}&#10;&#10;.activityMeta {&#10;  color: #6b7280;&#10;  font-size: 0.75rem;&#10;  margin-bottom: 0.375rem;&#10;  display: flex;&#10;  align-items: center;&#10;  gap: 0.5rem;&#10;}&#10;&#10;.activityDescription {&#10;  color: #4b5563;&#10;  font-size: 0.8rem;&#10;  line-height: 1.3;&#10;  display: -webkit-box;&#10;  -webkit-line-clamp: 1;&#10;  -webkit-box-orient: vertical;&#10;  overflow: hidden;&#10;  text-overflow: ellipsis;&#10;}&#10;&#10;.emptyState {&#10;  text-align: center;&#10;  padding: 2rem 1rem;&#10;  color: #9ca3af;&#10;  font-style: italic;&#10;  background: #f9fafb;&#10;  border-radius: 0.75rem;&#10;  border: 2px dashed #e5e7eb;&#10;}&#10;&#10;/* Responsive adjustments for activities */&#10;@media (max-width: 768px) {&#10;  .activityItem {&#10;    padding: 0.875rem;&#10;    gap: 0.75rem;&#10;  }&#10;&#10;  .activityIcon {&#10;    width: 36px;&#10;    height: 36px;&#10;  }&#10;&#10;  .activityTitle {&#10;    font-size: 0.875rem;&#10;  }&#10;&#10;  .activityMeta {&#10;    font-size: 0.75rem;&#10;  }&#10;&#10;  .activityDescription {&#10;    font-size: 0.8rem;&#10;  }&#10;&#10;  .sectionTitle {&#10;    font-size: 1rem;&#10;  }&#10;}&#10;&#10;@media (max-width: 480px) {&#10;  .activitySection {&#10;    margin-bottom: 1.5rem;&#10;  }&#10;&#10;  .activityItem {&#10;    padding: 0.75rem;&#10;    gap: 0.625rem;&#10;  }&#10;&#10;  .activityIcon {&#10;    width: 32px;&#10;    height: 32px;&#10;  }&#10;&#10;  .emptyState {&#10;    padding: 1.5rem 0.75rem;&#10;    font-size: 0.875rem;&#10;  }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>